

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 23 19:16:18 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  001E80                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _anio
    51  001E80  000F               	dw	15
    52                           
    53                           ;initializer for _dia
    54  001E82  0008               	dw	8
    55                           
    56                           ;initializer for _diasem
    57  001E84  0003               	dw	3
    58                           
    59                           ;initializer for _hora
    60  001E86  0012               	dw	18
    61                           
    62                           ;initializer for _mes
    63  001E88  0009               	dw	9
    64                           
    65                           ;initializer for _minuto
    66  001E8A  001E               	dw	30
    67                           
    68                           	psect	smallconst
    69  000F00                     __psmallconst:
    70                           	opt stack 0
    71  000F00  00                 	db	0
    72  000F01                     _dpowers:
    73                           	opt stack 0
    74  000F01  0001               	dw	1
    75  000F03  000A               	dw	10
    76  000F05  0064               	dw	100
    77  000F07  03E8               	dw	1000
    78  000F09  2710               	dw	10000
    79  000F0B                     __end_of_dpowers:
    80                           	opt stack 0
    81  000F0B                     _LCD_INIT_STRING:
    82                           	opt stack 0
    83  000F0B  28                 	db	40
    84  000F0C  0C                 	db	12
    85  000F0D  01                 	db	1
    86  000F0E  06                 	db	6
    87  000F0F                     __end_of_LCD_INIT_STRING:
    88                           	opt stack 0
    89  000F0F                     STR_2:
    90                           
    91                           ; BSR set to: 15
    92  000F0F  25                 	db	37
    93  000F10  30                 	db	48	;'0'
    94  000F11  32                 	db	50	;'2'
    95  000F12  75                 	db	117	;'u'
    96  000F13  2F                 	db	47
    97  000F14  25                 	db	37
    98  000F15  30                 	db	48	;'0'
    99  000F16  32                 	db	50	;'2'
   100  000F17  75                 	db	117	;'u'
   101  000F18  2F                 	db	47
   102  000F19  25                 	db	37
   103  000F1A  30                 	db	48	;'0'
   104  000F1B  32                 	db	50	;'2'
   105  000F1C  75                 	db	117	;'u'
   106  000F1D  00                 	db	0
   107  000F1E                     STR_3:
   108                           
   109                           ; BSR set to: 15
   110  000F1E  25                 	db	37
   111  000F1F  30                 	db	48	;'0'
   112  000F20  32                 	db	50	;'2'
   113  000F21  75                 	db	117	;'u'
   114  000F22  3A                 	db	58	;':'
   115  000F23  25                 	db	37
   116  000F24  30                 	db	48	;'0'
   117  000F25  32                 	db	50	;'2'
   118  000F26  75                 	db	117	;'u'
   119  000F27  3A                 	db	58	;':'
   120  000F28  25                 	db	37
   121  000F29  30                 	db	48	;'0'
   122  000F2A  32                 	db	50	;'2'
   123  000F2B  75                 	db	117	;'u'
   124  000F2C  00                 	db	0
   125  000F2D                     STR_5:
   126                           
   127                           ; BSR set to: 15
   128  000F2D  20                 	db	32
   129  000F2E  20                 	db	32
   130  000F2F  20                 	db	32
   131  000F30  20                 	db	32
   132  000F31  20                 	db	32
   133  000F32  20                 	db	32
   134  000F33  00                 	db	0
   135  000F34                     STR_1:
   136                           
   137                           ; BSR set to: 15
   138  000F34  55                 	db	85	;'U'
   139  000F35  4E                 	db	78	;'N'
   140  000F36  49                 	db	73	;'I'
   141  000F37  4D                 	db	77	;'M'
   142  000F38  49                 	db	73	;'I'
   143  000F39  43                 	db	67	;'C'
   144  000F3A  00                 	db	0
   145  0000                     
   146                           ; #config settings
   147  000F3B  00                 	db	0	; dummy byte at the end
   148  0000                     
   149                           	psect	nvCOMRAM
   150  000041                     __pnvCOMRAM:
   151                           	opt stack 0
   152  000041                     _anio_d:
   153                           	opt stack 0
   154  000041                     	ds	1
   155  000042                     _anio_u:
   156                           	opt stack 0
   157  000042                     	ds	1
   158  000043                     _dia_semana:
   159                           	opt stack 0
   160  000043                     	ds	1
   161  000044                     _fecha_d:
   162                           	opt stack 0
   163  000044                     	ds	1
   164  000045                     _fecha_u:
   165                           	opt stack 0
   166  000045                     	ds	1
   167  000046                     _hora_d:
   168                           	opt stack 0
   169  000046                     	ds	1
   170  000047                     _hora_u:
   171                           	opt stack 0
   172  000047                     	ds	1
   173  000048                     _mes_d:
   174                           	opt stack 0
   175  000048                     	ds	1
   176  000049                     _mes_u:
   177                           	opt stack 0
   178  000049                     	ds	1
   179  00004A                     _minuto_d:
   180                           	opt stack 0
   181  00004A                     	ds	1
   182  00004B                     _minuto_u:
   183                           	opt stack 0
   184  00004B                     	ds	1
   185  00004C                     _segundo_d:
   186                           	opt stack 0
   187  00004C                     	ds	1
   188  00004D                     _segundo_u:
   189                           	opt stack 0
   190  00004D                     	ds	1
   191  0000                     _ANCON0	set	3912
   192  0000                     _RTCCFG	set	3903
   193  0000                     _RTCCFGbits	set	3903
   194  0000                     _ADCON0	set	4034
   195  0000                     _ADCON1	set	4033
   196  0000                     _ALRMCFGbits	set	3985
   197  0000                     _EECON2	set	4007
   198  0000                     _INTCONbits	set	4082
   199  0000                     _LATBbits	set	3978
   200  0000                     _OSCCONbits	set	4051
   201  0000                     _OSCTUNEbits	set	3995
   202  0000                     _PIE3bits	set	4003
   203  0000                     _PORTAbits	set	3968
   204  0000                     _RTCVALH	set	3993
   205  0000                     _RTCVALL	set	3992
   206  0000                     _T1CONbits	set	4045
   207  0000                     _TRISA	set	3986
   208  0000                     _TRISB	set	3987
   209  0000                     _TRISBbits	set	3987
   210  0000                     _TRISC	set	3988
   211                           
   212                           	psect	cinit
   213  001D18                     __pcinit:
   214                           	opt stack 0
   215  001D18                     start_initialization:
   216                           	opt stack 0
   217  001D18                     __initialization:
   218                           	opt stack 0
   219                           
   220                           ; Clear objects allocated to BANK0 (44 bytes)
   221  001D18  EE00  F060         	lfsr	0,__pbssBANK0
   222  001D1C  0E2C               	movlw	44
   223  001D1E                     clear_0:
   224  001D1E  6AEE               	clrf	postinc0,c
   225  001D20  06E8               	decf	wreg,f,c
   226  001D22  E1FD               	bnz	clear_0
   227                           
   228                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   229  001D24  6A5A               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   230                           
   231                           ; Clear objects allocated to COMRAM (26 bytes)
   232  001D26  EE00  F027         	lfsr	0,__pbssCOMRAM
   233  001D2A  0E1A               	movlw	26
   234  001D2C                     clear_1:
   235  001D2C  6AEE               	clrf	postinc0,c
   236  001D2E  06E8               	decf	wreg,f,c
   237  001D30  E1FD               	bnz	clear_1
   238                           
   239                           ; Initialize objects allocated to COMRAM (12 bytes)
   240                           ; load TBLPTR registers with __pidataCOMRAM
   241  001D32  0E80               	movlw	low __pidataCOMRAM
   242  001D34  6EF6               	movwf	tblptrl,c
   243  001D36  0E1E               	movlw	high __pidataCOMRAM
   244  001D38  6EF7               	movwf	tblptrh,c
   245  001D3A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   246  001D3C  6EF8               	movwf	tblptru,c
   247  001D3E  EE00  F04E         	lfsr	0,__pdataCOMRAM
   248  001D42  EE10 F00C          	lfsr	1,12
   249  001D46                     copy_data0:
   250  001D46  0009               	tblrd		*+
   251  001D48  CFF5 FFEE          	movff	tablat,postinc0
   252  001D4C  50E5               	movf	postdec1,w,c
   253  001D4E  50E1               	movf	fsr1l,w,c
   254  001D50  E1FA               	bnz	copy_data0
   255  001D52                     end_of_initialization:
   256                           	opt stack 0
   257  001D52                     __end_of__initialization:
   258                           	opt stack 0
   259  001D52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  001D54  6EF8               	movwf	tblptru,c
   261  001D56  0100               	movlb	0
   262  001D58  EFEA  F00B         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bitbssCOMRAM
   273  0002D0                     __pbitbssCOMRAM:
   274                           	opt stack 0
   275  0002D0                     _flag:
   276                           	opt stack 0
   277  0002D0                     	ds	1
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1l	equ	0xFE1
   286                           
   287                           	psect	bssCOMRAM
   288  000027                     __pbssCOMRAM:
   289                           	opt stack 0
   290  000027                     _RtccTimeVal:
   291                           	opt stack 0
   292  000027                     	ds	4
   293  00002B                     _a:
   294                           	opt stack 0
   295  00002B                     	ds	2
   296  00002D                     _b:
   297                           	opt stack 0
   298  00002D                     	ds	2
   299  00002F                     _c:
   300                           	opt stack 0
   301  00002F                     	ds	2
   302  000031                     _i:
   303                           	opt stack 0
   304  000031                     	ds	2
   305  000033                     _j:
   306                           	opt stack 0
   307  000033                     	ds	2
   308  000035                     _k:
   309                           	opt stack 0
   310  000035                     	ds	2
   311  000037                     _segundo:
   312                           	opt stack 0
   313  000037                     	ds	2
   314  000039                     _RtccDate:
   315                           	opt stack 0
   316  000039                     	ds	4
   317  00003D                     _RtccTime:
   318                           	opt stack 0
   319  00003D                     	ds	4
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	dataCOMRAM
   330  00004E                     __pdataCOMRAM:
   331                           	opt stack 0
   332  00004E                     _anio:
   333                           	opt stack 0
   334  00004E                     	ds	2
   335  000050                     _dia:
   336                           	opt stack 0
   337  000050                     	ds	2
   338  000052                     _diasem:
   339                           	opt stack 0
   340  000052                     	ds	2
   341  000054                     _hora:
   342                           	opt stack 0
   343  000054                     	ds	2
   344  000056                     _mes:
   345                           	opt stack 0
   346  000056                     	ds	2
   347  000058                     _minuto:
   348                           	opt stack 0
   349  000058                     	ds	2
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	bssBANK0
   360  000060                     __pbssBANK0:
   361                           	opt stack 0
   362  000060                     _RtccAlrmTimeDate:
   363                           	opt stack 0
   364  000060                     	ds	8
   365  000068                     _RtccTimeDate:
   366                           	opt stack 0
   367  000068                     	ds	8
   368  000070                     _Rtcc_read_TimeDate:
   369                           	opt stack 0
   370  000070                     	ds	8
   371  000078                     _buffer2:
   372                           	opt stack 0
   373  000078                     	ds	20
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	cstackCOMRAM
   384  000001                     __pcstackCOMRAM:
   385                           	opt stack 0
   386  000001                     ??_isdigit:
   387  000001                     ??_lcd_send_nibble:
   388  000001                     ?___wmul:
   389                           	opt stack 0
   390  000001                     ?___awdiv:
   391                           	opt stack 0
   392  000001                     ?___lwdiv:
   393                           	opt stack 0
   394  000001                     Delay100TCYx@unit:
   395                           	opt stack 0
   396  000001                     Delay1KTCYx@unit:
   397                           	opt stack 0
   398  000001                     evalueChanceOfRaw@x:
   399                           	opt stack 0
   400  000001                     RtccReadDate@pDt:
   401                           	opt stack 0
   402  000001                     RtccReadTime@pTm:
   403                           	opt stack 0
   404  000001                     RtccWriteDate@pDt:
   405                           	opt stack 0
   406  000001                     RtccWriteTime@pTm:
   407                           	opt stack 0
   408  000001                     ___wmul@multiplier:
   409                           	opt stack 0
   410  000001                     ___awdiv@dividend:
   411                           	opt stack 0
   412  000001                     ___lwdiv@dividend:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416  000001                     	ds	1
   417  000002                     lcd_send_nibble@nibble:
   418                           	opt stack 0
   419  000002                     _isdigit$1836:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x1
   423  000002                     	ds	1
   424  000003                     lcd_send_byte@n:
   425                           	opt stack 0
   426  000003                     RtccWriteDate@di:
   427                           	opt stack 0
   428  000003                     RtccWriteTime@di:
   429                           	opt stack 0
   430  000003                     isdigit@c:
   431                           	opt stack 0
   432  000003                     evalueChanceOfRaw@y:
   433                           	opt stack 0
   434  000003                     ___wmul@multiplicand:
   435                           	opt stack 0
   436  000003                     ___awdiv@divisor:
   437                           	opt stack 0
   438  000003                     ___lwdiv@divisor:
   439                           	opt stack 0
   440  000003                     RtccReadDate@rTD1:
   441                           	opt stack 0
   442  000003                     RtccReadTime@rTD1:
   443                           	opt stack 0
   444                           
   445                           ; 8 bytes @ 0x2
   446  000003                     	ds	1
   447  000004                     lcd_send_byte@address:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x3
   451  000004                     	ds	1
   452  000005                     lcd_init@i:
   453                           	opt stack 0
   454  000005                     lcd_gotoxy@y:
   455                           	opt stack 0
   456  000005                     lcd_comand@d:
   457                           	opt stack 0
   458  000005                     lcd_setcursor_vb@blink:
   459                           	opt stack 0
   460  000005                     RtccWriteDate@wasOn:
   461                           	opt stack 0
   462  000005                     RtccWriteTime@wasOn:
   463                           	opt stack 0
   464  000005                     ___awdiv@counter:
   465                           	opt stack 0
   466  000005                     ___wmul@product:
   467                           	opt stack 0
   468  000005                     ___lwdiv@quotient:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x4
   472  000005                     	ds	1
   473  000006                     lcd_gotoxy@x:
   474                           	opt stack 0
   475  000006                     lcd_setcursor_vb@visible:
   476                           	opt stack 0
   477  000006                     RtccWriteDate@wasAlrm:
   478                           	opt stack 0
   479  000006                     RtccWriteTime@wasAlrm:
   480                           	opt stack 0
   481  000006                     ___awdiv@sign:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x5
   485  000006                     	ds	1
   486  000007                     lcd_gotoxy@address:
   487                           	opt stack 0
   488  000007                     RtccWriteTime@wasWrEn:
   489                           	opt stack 0
   490  000007                     ___lwdiv@counter:
   491                           	opt stack 0
   492  000007                     jumpIfNotNumber@x:
   493                           	opt stack 0
   494  000007                     RtccWriteDate@tempYear:
   495                           	opt stack 0
   496  000007                     ___awdiv@quotient:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x6
   500  000007                     	ds	1
   501  000008                     ?___lwmod:
   502                           	opt stack 0
   503  000008                     lcd_putc@c:
   504                           	opt stack 0
   505  000008                     RtccWriteTime@tempMinSec:
   506                           	opt stack 0
   507  000008                     ___lwmod@dividend:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x7
   511  000008                     	ds	1
   512  000009                     jumpIfNotNumber@y:
   513                           	opt stack 0
   514  000009                     RtccWriteDate@wasWrEn:
   515                           	opt stack 0
   516  000009                     lcd_putrs@ptr:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x8
   520  000009                     	ds	1
   521  00000A                     ??_jumpIfNotNumber:
   522  00000A                     RtccWriteDate@tempDayMonth:
   523                           	opt stack 0
   524  00000A                     RtccWriteTime@tempHourWDay:
   525                           	opt stack 0
   526  00000A                     ___lwmod@divisor:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x9
   530  00000A                     	ds	1
   531  00000B                     RtccReadDate@rTD0:
   532                           	opt stack 0
   533  00000B                     RtccReadTime@rTD0:
   534                           	opt stack 0
   535                           
   536                           ; 8 bytes @ 0xA
   537  00000B                     	ds	1
   538  00000C                     ___lwmod@counter:
   539                           	opt stack 0
   540  00000C                     RtccWriteDate@tempHourWDay:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0xB
   544  00000C                     	ds	1
   545  00000D                     ?_sprintf:
   546                           	opt stack 0
   547  00000D                     sprintf@sp:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0xC
   551  00000D                     	ds	1
   552  00000E                     ??_setClock:
   553                           
   554                           ; 0 bytes @ 0xD
   555  00000E                     	ds	1
   556  00000F                     setClock@x:
   557                           	opt stack 0
   558  00000F                     sprintf@f:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xE
   562  00000F                     	ds	4
   563  000013                     
   564                           ; 0 bytes @ 0x12
   565  000013                     	ds	4
   566  000017                     ??_sprintf:
   567                           
   568                           ; 0 bytes @ 0x16
   569  000017                     	ds	4
   570  00001B                     sprintf@ap:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x1A
   574  00001B                     	ds	2
   575  00001D                     sprintf@flag:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x1C
   579  00001D                     	ds	1
   580  00001E                     sprintf@val:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x1D
   584  00001E                     	ds	2
   585  000020                     sprintf@prec:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x1F
   589  000020                     	ds	1
   590  000021                     sprintf@width:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x20
   594  000021                     	ds	2
   595  000023                     sprintf@c:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x22
   599  000023                     	ds	1
   600  000024                     ??_main:
   601                           
   602                           ; 0 bytes @ 0x23
   603  000024                     	ds	1
   604  000025                     main@y:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x24
   608  000025                     	ds	1
   609  000026                     main@x:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x25
   613  000026                     	ds	1
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 163 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  x               1   37[COMRAM] unsigned char 
   633 ;;  y               1   36[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  2  180[None  ] int 
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   646 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   647 ;;Total ram usage:        3 bytes
   648 ;; Hardware stack levels required when called:    6
   649 ;; This function calls:
   650 ;;		_Read_RTC
   651 ;;		_Setup
   652 ;;		_caratula
   653 ;;		_evalueChanceOfRaw
   654 ;;		_jumpIfNotNumber
   655 ;;		_lcd_gotoxy
   656 ;;		_lcd_setcursor_vb
   657 ;;		_setClock
   658 ;; This function is called by:
   659 ;;		Startup code after reset
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text0
   664  0017D4                     __ptext0:
   665                           	opt stack 0
   666  0017D4                     _main:
   667                           	opt stack 25
   668                           
   669                           ;main.c: 164: Setup();
   670                           
   671                           ; BSR set to: 15
   672                           ;incstack = 0
   673  0017D4  EC68  F00E         	call	_Setup	;wreg free
   674                           
   675                           ;main.c: 165: int8 x = 9;
   676  0017D8  0E09               	movlw	9
   677  0017DA  6E26               	movwf	main@x,c
   678                           
   679                           ;main.c: 166: int8 y = 1;
   680  0017DC  0E01               	movlw	1
   681  0017DE  6E25               	movwf	main@y,c
   682  0017E0  D000               	goto	l2461
   683  0017E2                     l2461:
   684                           
   685                           ;main.c: 169: Read_RTC();
   686  0017E2  EC22  F00B         	call	_Read_RTC	;wreg free
   687                           
   688                           ;main.c: 170: caratula();
   689  0017E6  EC9D  F00A         	call	_caratula	;wreg free
   690                           
   691                           ;main.c: 171: lcd_setcursor_vb(1,1);
   692  0017EA  0E01               	movlw	1
   693  0017EC  6E05               	movwf	lcd_setcursor_vb@blink,c
   694  0017EE  0E01               	movlw	1
   695  0017F0  EC14  F00F         	call	_lcd_setcursor_vb
   696                           
   697                           ;main.c: 172: lcd_gotoxy(x,y);
   698  0017F4  C025  F005         	movff	main@y,lcd_gotoxy@y
   699  0017F8  5026               	movf	main@x,w,c
   700  0017FA  ECF1  F00E         	call	_lcd_gotoxy
   701                           
   702                           ;main.c: 173: if(PORTAbits.RA1 == 0)
   703  0017FE  B280               	btfsc	3968,1,c	;volatile
   704  001800  D02A               	goto	l182
   705                           
   706                           ;main.c: 174: {
   707                           ;main.c: 175: x++;
   708  001802  2A26               	incf	main@x,f,c
   709                           
   710                           ;main.c: 176: lcd_gotoxy(x,y);
   711  001804  C025  F005         	movff	main@y,lcd_gotoxy@y
   712  001808  5026               	movf	main@x,w,c
   713  00180A  ECF1  F00E         	call	_lcd_gotoxy
   714                           
   715                           ;main.c: 177: _delay((unsigned long)((50)*(8000000/4000.0)));
   716  00180E  0E82               	movlw	130
   717  001810  6E24               	movwf	??_main& (0+255),c
   718  001812  0EDE               	movlw	222
   719  001814                     u1857:
   720  001814  2EE8               	decfsz	wreg,f,c
   721  001816  D7FE               	goto	u1857
   722  001818  2E24               	decfsz	??_main& (0+255),f,c
   723  00181A  D7FC               	goto	u1857
   724                           
   725                           ;main.c: 179: jumpIfNotNumber(&x,y);
   726  00181C  0E26               	movlw	low main@x
   727  00181E  6E07               	movwf	jumpIfNotNumber@x,c
   728  001820  0E00               	movlw	high main@x
   729  001822  6E08               	movwf	jumpIfNotNumber@x+1,c
   730  001824  C025  F009         	movff	main@y,jumpIfNotNumber@y
   731  001828  ECD1  F00C         	call	_jumpIfNotNumber	;wreg free
   732                           
   733                           ;main.c: 180: evalueChanceOfRaw(&x,&y);
   734  00182C  0E26               	movlw	low main@x
   735  00182E  6E01               	movwf	evalueChanceOfRaw@x,c
   736  001830  0E00               	movlw	high main@x
   737  001832  6E02               	movwf	evalueChanceOfRaw@x+1,c
   738  001834  0E25               	movlw	low main@y
   739  001836  6E03               	movwf	evalueChanceOfRaw@y,c
   740  001838  0E00               	movlw	high main@y
   741  00183A  6E04               	movwf	evalueChanceOfRaw@y+1,c
   742  00183C  ECC7  F00E         	call	_evalueChanceOfRaw	;wreg free
   743                           
   744                           ;main.c: 182: if(y == 2 && x == 9){
   745  001840  0E02               	movlw	2
   746  001842  1825               	xorwf	main@y,w,c
   747  001844  A4D8               	btfss	status,2,c
   748  001846  D008               	goto	l184
   749  001848  0E09               	movlw	9
   750  00184A  1826               	xorwf	main@x,w,c
   751  00184C  A4D8               	btfss	status,2,c
   752  00184E  D004               	goto	l184
   753                           
   754                           ;main.c: 183: y = 1;
   755  001850  0E01               	movlw	1
   756  001852  6E25               	movwf	main@y,c
   757                           
   758                           ;main.c: 184: }
   759                           ;main.c: 185: }
   760  001854  D001               	goto	l184
   761  001856                     l182:
   762                           
   763                           ;main.c: 186: else LATBbits.LATB1 = 0;;
   764  001856  928A               	bcf	3978,1,c	;volatile
   765  001858                     l184:
   766                           
   767                           ;main.c: 188: if(PORTAbits.RA0 == 0){
   768  001858  B080               	btfsc	3968,0,c	;volatile
   769  00185A  D004               	goto	l185
   770                           
   771                           ;main.c: 189: setClock(x);
   772  00185C  5026               	movf	main@x,w,c
   773  00185E  EC8E  F00B         	call	_setClock
   774                           
   775                           ;main.c: 190: }
   776  001862  D002               	goto	l2489
   777  001864                     l185:
   778                           
   779                           ;main.c: 191: else LATBbits.LATB0 = 0;;
   780  001864  908A               	bcf	3978,0,c	;volatile
   781  001866  D000               	goto	l2489
   782  001868                     l2489:
   783                           
   784                           ;main.c: 193: _delay((unsigned long)((98)*(8000000/4000.0)));
   785  001868  0EFF               	movlw	255
   786  00186A  6E24               	movwf	??_main& (0+255),c
   787  00186C  0E8A               	movlw	138
   788  00186E                     u1867:
   789  00186E  2EE8               	decfsz	wreg,f,c
   790  001870  D7FE               	goto	u1867
   791  001872  2E24               	decfsz	??_main& (0+255),f,c
   792  001874  D7FC               	goto	u1867
   793  001876  D000               	nop2	
   794  001878  D7B4               	goto	l2461
   795                           
   796                           ;main.c: 195: }
   797                           ;main.c: 196: return 0;
   798                           ;	Return value of _main is never used
   799  00187A  EF00  F000         	goto	start
   800  00187E                     __end_of_main:
   801                           	opt stack 0
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           postdec1	equ	0xFE5
   809                           fsr1l	equ	0xFE1
   810                           status	equ	0xFD8
   811                           
   812 ;; *************** function _setClock *****************
   813 ;; Defined at:
   814 ;;		line 127 in file "main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;  x               1    wreg     unsigned char 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  x               1   14[COMRAM] unsigned char 
   819 ;; Return value:  Size  Location     Type
   820 ;;		None               void
   821 ;; Registers used:
   822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   832 ;;Total ram usage:        2 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    3
   835 ;; This function calls:
   836 ;;		_Write_RTC
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text1
   843  00171C                     __ptext1:
   844                           	opt stack 0
   845  00171C                     _setClock:
   846                           	opt stack 27
   847                           
   848                           ;incstack = 0
   849                           ;setClock@x stored from wreg
   850  00171C  6E0F               	movwf	setClock@x,c
   851                           
   852                           ;main.c: 128: switch (x) {
   853  00171E  D03F               	goto	l2449
   854  001720                     l2421:
   855                           
   856                           ;main.c: 130: dia++;
   857  001720  4A50               	infsnz	_dia,f,c
   858  001722  2A51               	incf	_dia+1,f,c
   859                           
   860                           ;main.c: 131: if(dia > 31){
   861  001724  BE51               	btfsc	_dia+1,7,c
   862  001726  D04C               	goto	l2451
   863  001728  5051               	movf	_dia+1,w,c
   864  00172A  E104               	bnz	u1760
   865  00172C  0E20               	movlw	32
   866  00172E  5C50               	subwf	_dia,w,c
   867  001730  A0D8               	btfss	status,0,c
   868  001732  D046               	goto	l2451
   869  001734                     u1760:
   870                           
   871                           ;main.c: 132: dia = 1;
   872  001734  0E00               	movlw	0
   873  001736  6E51               	movwf	_dia+1,c
   874  001738  0E01               	movlw	1
   875  00173A  6E50               	movwf	_dia,c
   876                           
   877                           ;main.c: 133: }
   878                           ;main.c: 134: break;
   879  00173C  D041               	goto	l2451
   880  00173E                     l2427:
   881                           
   882                           ;main.c: 136: mes++;
   883  00173E  4A56               	infsnz	_mes,f,c
   884  001740  2A57               	incf	_mes+1,f,c
   885                           
   886                           ;main.c: 137: if(mes > 12){
   887  001742  BE57               	btfsc	_mes+1,7,c
   888  001744  D03D               	goto	l2451
   889  001746  5057               	movf	_mes+1,w,c
   890  001748  E104               	bnz	u1770
   891  00174A  0E0D               	movlw	13
   892  00174C  5C56               	subwf	_mes,w,c
   893  00174E  A0D8               	btfss	status,0,c
   894  001750  D037               	goto	l2451
   895  001752                     u1770:
   896                           
   897                           ;main.c: 138: mes = 1;
   898  001752  0E00               	movlw	0
   899  001754  6E57               	movwf	_mes+1,c
   900  001756  0E01               	movlw	1
   901  001758  6E56               	movwf	_mes,c
   902                           
   903                           ;main.c: 139: }
   904                           ;main.c: 140: break;
   905  00175A  D032               	goto	l2451
   906  00175C                     l2433:
   907                           
   908                           ;main.c: 142: anio++;
   909  00175C  4A4E               	infsnz	_anio,f,c
   910  00175E  2A4F               	incf	_anio+1,f,c
   911                           
   912                           ;main.c: 143: break;
   913  001760  D02F               	goto	l2451
   914  001762                     l2435:
   915                           
   916                           ;main.c: 145: hora++;
   917  001762  4A54               	infsnz	_hora,f,c
   918  001764  2A55               	incf	_hora+1,f,c
   919                           
   920                           ;main.c: 146: if(hora > 23){
   921  001766  BE55               	btfsc	_hora+1,7,c
   922  001768  D02B               	goto	l2451
   923  00176A  5055               	movf	_hora+1,w,c
   924  00176C  E104               	bnz	u1780
   925  00176E  0E18               	movlw	24
   926  001770  5C54               	subwf	_hora,w,c
   927  001772  A0D8               	btfss	status,0,c
   928  001774  D025               	goto	l2451
   929  001776                     u1780:
   930                           
   931                           ;main.c: 147: hora = 0;
   932  001776  0E00               	movlw	0
   933  001778  6E55               	movwf	_hora+1,c
   934  00177A  0E00               	movlw	0
   935  00177C  6E54               	movwf	_hora,c
   936                           
   937                           ;main.c: 148: }
   938                           ;main.c: 149: break;
   939  00177E  D020               	goto	l2451
   940  001780                     l2441:
   941                           
   942                           ;main.c: 151: minuto++;
   943  001780  4A58               	infsnz	_minuto,f,c
   944  001782  2A59               	incf	_minuto+1,f,c
   945                           
   946                           ;main.c: 152: if(minuto > 59){
   947  001784  BE59               	btfsc	_minuto+1,7,c
   948  001786  D01C               	goto	l2451
   949  001788  5059               	movf	_minuto+1,w,c
   950  00178A  E104               	bnz	u1790
   951  00178C  0E3C               	movlw	60
   952  00178E  5C58               	subwf	_minuto,w,c
   953  001790  A0D8               	btfss	status,0,c
   954  001792  D016               	goto	l2451
   955  001794                     u1790:
   956                           
   957                           ;main.c: 153: minuto = 0;
   958  001794  0E00               	movlw	0
   959  001796  6E59               	movwf	_minuto+1,c
   960  001798  0E00               	movlw	0
   961  00179A  6E58               	movwf	_minuto,c
   962                           
   963                           ;main.c: 158: }
   964                           
   965                           ;main.c: 157: break;
   966                           
   967                           ;main.c: 156: default:
   968                           
   969                           ;main.c: 154: }
   970                           ;main.c: 155: break;
   971  00179C  D011               	goto	l2451
   972  00179E                     l2449:
   973  00179E  500F               	movf	setClock@x,w,c
   974                           
   975                           ; Switch size 1, requested type "space"
   976                           ; Number of cases is 5, Range of values is 2 to 16
   977                           ; switch strategies available:
   978                           ; Name         Instructions Cycles
   979                           ; simple_byte           16     9 (average)
   980                           ;	Chosen strategy is simple_byte
   981  0017A0  0A02               	xorlw	2	; case 2
   982  0017A2  B4D8               	btfsc	status,2,c
   983  0017A4  D7DE               	goto	l2435
   984  0017A6  0A07               	xorlw	7	; case 5
   985  0017A8  B4D8               	btfsc	status,2,c
   986  0017AA  D7EA               	goto	l2441
   987  0017AC  0A0F               	xorlw	15	; case 10
   988  0017AE  B4D8               	btfsc	status,2,c
   989  0017B0  D7B7               	goto	l2421
   990  0017B2  0A07               	xorlw	7	; case 13
   991  0017B4  B4D8               	btfsc	status,2,c
   992  0017B6  D7C3               	goto	l2427
   993  0017B8  0A1D               	xorlw	29	; case 16
   994  0017BA  B4D8               	btfsc	status,2,c
   995  0017BC  D7CF               	goto	l2433
   996  0017BE  D000               	goto	l2451
   997  0017C0                     l2451:
   998                           
   999                           ;main.c: 159: Write_RTC();
  1000  0017C0  ECD0  F008         	call	_Write_RTC	;wreg free
  1001                           
  1002                           ;main.c: 160: _delay((unsigned long)((50)*(8000000/4000.0)));
  1003  0017C4  0E82               	movlw	130
  1004  0017C6  6E0E               	movwf	??_setClock& (0+255),c
  1005  0017C8  0EDE               	movlw	222
  1006  0017CA                     u1877:
  1007  0017CA  2EE8               	decfsz	wreg,f,c
  1008  0017CC  D7FE               	goto	u1877
  1009  0017CE  2E0E               	decfsz	??_setClock& (0+255),f,c
  1010  0017D0  D7FC               	goto	u1877
  1011  0017D2  0012               	return		;funcret
  1012  0017D4                     __end_of_setClock:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           postdec1	equ	0xFE5
  1021                           fsr1l	equ	0xFE1
  1022                           status	equ	0xFD8
  1023                           
  1024 ;; *************** function _jumpIfNotNumber *****************
  1025 ;; Defined at:
  1026 ;;		line 109 in file "main.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  x               2    6[COMRAM] PTR unsigned char 
  1029 ;;		 -> main@x(1), 
  1030 ;;  y               1    8[COMRAM] unsigned char 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;		None
  1033 ;; Return value:  Size  Location     Type
  1034 ;;		None               void
  1035 ;; Registers used:
  1036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1042 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1045 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1046 ;;Total ram usage:        4 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    3
  1049 ;; This function calls:
  1050 ;;		_lcd_setcursor_vb
  1051 ;; This function is called by:
  1052 ;;		_main
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           	psect	text2
  1057  0019A2                     __ptext2:
  1058                           	opt stack 0
  1059  0019A2                     _jumpIfNotNumber:
  1060                           	opt stack 27
  1061                           
  1062                           ;main.c: 110: if( (*x==11 && y ==1)
  1063                           ;main.c: 111: || (*x==14 && y ==1)
  1064                           ;main.c: 112: || (*x==3 && y==2)
  1065                           ;main.c: 113: || (*x==6 && y==2)){
  1066                           
  1067                           ;incstack = 0
  1068  0019A2  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1069  0019A6  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1070  0019AA  0E0B               	movlw	11
  1071  0019AC  18DE               	xorwf	postinc2,w,c
  1072  0019AE  A4D8               	btfss	status,2,c
  1073  0019B0  D003               	goto	l2403
  1074  0019B2  0409               	decf	jumpIfNotNumber@y,w,c
  1075  0019B4  B4D8               	btfsc	status,2,c
  1076  0019B6  D023               	goto	l2415
  1077  0019B8                     l2403:
  1078  0019B8  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1079  0019BC  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1080  0019C0  0E0E               	movlw	14
  1081  0019C2  18DE               	xorwf	postinc2,w,c
  1082  0019C4  A4D8               	btfss	status,2,c
  1083  0019C6  D003               	goto	l2407
  1084  0019C8  0409               	decf	jumpIfNotNumber@y,w,c
  1085  0019CA  B4D8               	btfsc	status,2,c
  1086  0019CC  D018               	goto	l2415
  1087  0019CE                     l2407:
  1088  0019CE  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1089  0019D2  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1090  0019D6  0E03               	movlw	3
  1091  0019D8  18DE               	xorwf	postinc2,w,c
  1092  0019DA  A4D8               	btfss	status,2,c
  1093  0019DC  D004               	goto	l2411
  1094  0019DE  0E02               	movlw	2
  1095  0019E0  1809               	xorwf	jumpIfNotNumber@y,w,c
  1096  0019E2  B4D8               	btfsc	status,2,c
  1097  0019E4  D00C               	goto	l2415
  1098  0019E6                     l2411:
  1099  0019E6  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1100  0019EA  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1101  0019EE  0E06               	movlw	6
  1102  0019F0  18DE               	xorwf	postinc2,w,c
  1103  0019F2  A4D8               	btfss	status,2,c
  1104  0019F4  0012               	return	
  1105  0019F6  0E02               	movlw	2
  1106  0019F8  1809               	xorwf	jumpIfNotNumber@y,w,c
  1107  0019FA  A4D8               	btfss	status,2,c
  1108  0019FC  0012               	return	
  1109  0019FE                     l2415:
  1110                           
  1111                           ;main.c: 115: lcd_setcursor_vb(0,0);
  1112  0019FE  0E00               	movlw	0
  1113  001A00  6E05               	movwf	lcd_setcursor_vb@blink,c
  1114  001A02  0E00               	movlw	0
  1115  001A04  EC14  F00F         	call	_lcd_setcursor_vb
  1116                           
  1117                           ;main.c: 116: *x = *x + 1;
  1118  001A08  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1119  001A0C  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1120  001A10  50DF               	movf	indf2,w,c
  1121  001A12  6E0A               	movwf	??_jumpIfNotNumber& (0+255),c
  1122  001A14  280A               	incf	??_jumpIfNotNumber,w,c
  1123  001A16  C007  FFD9         	movff	jumpIfNotNumber@x,fsr2l
  1124  001A1A  C008  FFDA         	movff	jumpIfNotNumber@x+1,fsr2h
  1125  001A1E  6EDF               	movwf	indf2,c
  1126  001A20  0012               	return	
  1127  001A22  0012               	return		;funcret
  1128  001A24                     __end_of_jumpIfNotNumber:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           indf2	equ	0xFDF
  1139                           postinc2	equ	0xFDE
  1140                           fsr2h	equ	0xFDA
  1141                           fsr2l	equ	0xFD9
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _lcd_setcursor_vb *****************
  1145 ;; Defined at:
  1146 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  visible         1    wreg     unsigned char 
  1149 ;;  blink           1    4[COMRAM] unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  visible         1    5[COMRAM] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;		None               void
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1165 ;;Total ram usage:        2 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		_lcd_send_byte
  1170 ;; This function is called by:
  1171 ;;		_jumpIfNotNumber
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text3
  1177  001E28                     __ptext3:
  1178                           	opt stack 0
  1179  001E28                     _lcd_setcursor_vb:
  1180                           	opt stack 28
  1181                           
  1182                           ;incstack = 0
  1183                           ;lcd_setcursor_vb@visible stored from wreg
  1184  001E28  6E06               	movwf	lcd_setcursor_vb@visible,c
  1185                           
  1186                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  1187  001E2A  5006               	movf	lcd_setcursor_vb@visible,w,c
  1188  001E2C  2406               	addwf	lcd_setcursor_vb@visible,w,c
  1189  001E2E  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  1190  001E30  090C               	iorlw	12
  1191  001E32  6E03               	movwf	lcd_send_byte@n,c
  1192  001E34  0E00               	movlw	0
  1193  001E36  ECAE  F00E         	call	_lcd_send_byte
  1194  001E3A  0012               	return		;funcret
  1195  001E3C                     __end_of_lcd_setcursor_vb:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           indf2	equ	0xFDF
  1206                           postinc2	equ	0xFDE
  1207                           fsr2h	equ	0xFDA
  1208                           fsr2l	equ	0xFD9
  1209                           status	equ	0xFD8
  1210                           
  1211 ;; *************** function _evalueChanceOfRaw *****************
  1212 ;; Defined at:
  1213 ;;		line 102 in file "main.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  x               2    0[COMRAM] PTR unsigned char 
  1216 ;;		 -> main@x(1), 
  1217 ;;  y               2    2[COMRAM] PTR unsigned char 
  1218 ;;		 -> main@y(1), 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;		None               void
  1223 ;; Registers used:
  1224 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1233 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1234 ;;Total ram usage:        5 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_main
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text4
  1244  001D8E                     __ptext4:
  1245                           	opt stack 0
  1246  001D8E                     _evalueChanceOfRaw:
  1247                           	opt stack 30
  1248                           
  1249                           ;main.c: 103: if (*x == 17){
  1250                           
  1251                           ;incstack = 0
  1252  001D8E  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  1253  001D92  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  1254  001D96  0E11               	movlw	17
  1255  001D98  18DE               	xorwf	postinc2,w,c
  1256  001D9A  A4D8               	btfss	status,2,c
  1257  001D9C  0012               	return	
  1258                           
  1259                           ;main.c: 104: *x = 1;
  1260  001D9E  C001  FFD9         	movff	evalueChanceOfRaw@x,fsr2l
  1261  001DA2  C002  FFDA         	movff	evalueChanceOfRaw@x+1,fsr2h
  1262  001DA6  0E01               	movlw	1
  1263  001DA8  6EDF               	movwf	indf2,c
  1264                           
  1265                           ;main.c: 105: *y = 2;
  1266  001DAA  C003  FFD9         	movff	evalueChanceOfRaw@y,fsr2l
  1267  001DAE  C004  FFDA         	movff	evalueChanceOfRaw@y+1,fsr2h
  1268  001DB2  0E02               	movlw	2
  1269  001DB4  6EDF               	movwf	indf2,c
  1270  001DB6  0012               	return	
  1271  001DB8  0012               	return		;funcret
  1272  001DBA                     __end_of_evalueChanceOfRaw:
  1273                           	opt stack 0
  1274                           tblptru	equ	0xFF8
  1275                           tblptrh	equ	0xFF7
  1276                           tblptrl	equ	0xFF6
  1277                           tablat	equ	0xFF5
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1l	equ	0xFE1
  1282                           indf2	equ	0xFDF
  1283                           postinc2	equ	0xFDE
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288 ;; *************** function _caratula *****************
  1289 ;; Defined at:
  1290 ;;		line 36 in file "main.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;		None               void
  1297 ;; Registers used:
  1298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; Hardware stack levels required when called:    5
  1311 ;; This function calls:
  1312 ;;		_lcd_comand
  1313 ;;		_lcd_gotoxy
  1314 ;;		_lcd_putrs
  1315 ;;		_sprintf
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text5
  1322  00153A                     __ptext5:
  1323                           	opt stack 0
  1324  00153A                     _caratula:
  1325                           	opt stack 25
  1326                           
  1327                           ;main.c: 38: lcd_comand(0b00001100);
  1328                           
  1329                           ;incstack = 0
  1330  00153A  0E0C               	movlw	12
  1331  00153C  EC39  F00F         	call	_lcd_comand
  1332                           
  1333                           ;main.c: 39: lcd_gotoxy(1,1);
  1334  001540  0E01               	movlw	1
  1335  001542  6E05               	movwf	lcd_gotoxy@y,c
  1336  001544  0E01               	movlw	1
  1337  001546  ECF1  F00E         	call	_lcd_gotoxy
  1338                           
  1339                           ;main.c: 40: lcd_putrs("UNIMIC");
  1340  00154A  0E34               	movlw	low STR_1
  1341  00154C  6E09               	movwf	lcd_putrs@ptr,c
  1342  00154E  0E0F               	movlw	high STR_1
  1343  001550  6E0A               	movwf	lcd_putrs@ptr+1,c
  1344  001552  ECF2  F00D         	call	_lcd_putrs	;wreg free
  1345                           
  1346                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1347  001556  0E78               	movlw	low _buffer2
  1348  001558  6E0D               	movwf	sprintf@sp,c
  1349  00155A  0E00               	movlw	high _buffer2
  1350  00155C  6E0E               	movwf	sprintf@sp+1,c
  1351  00155E  0E0F               	movlw	low STR_2
  1352  001560  6E0F               	movwf	sprintf@f,c
  1353  001562  0E0F               	movlw	high STR_2
  1354  001564  6E10               	movwf	sprintf@f+1,c
  1355  001566  C050  F011         	movff	_dia,?_sprintf+4
  1356  00156A  C051  F012         	movff	_dia+1,?_sprintf+5
  1357  00156E  C056  F013         	movff	_mes,?_sprintf+6
  1358  001572  C057  F014         	movff	_mes+1,?_sprintf+7
  1359  001576  C04E  F015         	movff	_anio,?_sprintf+8
  1360  00157A  C04F  F016         	movff	_anio+1,?_sprintf+9
  1361  00157E  EC9E  F007         	call	_sprintf	;wreg free
  1362                           
  1363                           ;main.c: 42: lcd_gotoxy(9,1);
  1364  001582  0E01               	movlw	1
  1365  001584  6E05               	movwf	lcd_gotoxy@y,c
  1366  001586  0E09               	movlw	9
  1367  001588  ECF1  F00E         	call	_lcd_gotoxy
  1368                           
  1369                           ;main.c: 43: lcd_putrs(buffer2);
  1370  00158C  0E78               	movlw	low _buffer2
  1371  00158E  6E09               	movwf	lcd_putrs@ptr,c
  1372  001590  0E00               	movlw	high _buffer2
  1373  001592  6E0A               	movwf	lcd_putrs@ptr+1,c
  1374  001594  ECF2  F00D         	call	_lcd_putrs	;wreg free
  1375                           
  1376                           ;main.c: 44: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  1377  001598  0E78               	movlw	low _buffer2
  1378  00159A  6E0D               	movwf	sprintf@sp,c
  1379  00159C  0E00               	movlw	high _buffer2
  1380  00159E  6E0E               	movwf	sprintf@sp+1,c
  1381  0015A0  0E1E               	movlw	low STR_3
  1382  0015A2  6E0F               	movwf	sprintf@f,c
  1383  0015A4  0E0F               	movlw	high STR_3
  1384  0015A6  6E10               	movwf	sprintf@f+1,c
  1385  0015A8  C054  F011         	movff	_hora,?_sprintf+4
  1386  0015AC  C055  F012         	movff	_hora+1,?_sprintf+5
  1387  0015B0  C058  F013         	movff	_minuto,?_sprintf+6
  1388  0015B4  C059  F014         	movff	_minuto+1,?_sprintf+7
  1389  0015B8  C037  F015         	movff	_segundo,?_sprintf+8
  1390  0015BC  C038  F016         	movff	_segundo+1,?_sprintf+9
  1391  0015C0  EC9E  F007         	call	_sprintf	;wreg free
  1392                           
  1393                           ;main.c: 45: lcd_gotoxy(1,2);
  1394  0015C4  0E02               	movlw	2
  1395  0015C6  6E05               	movwf	lcd_gotoxy@y,c
  1396  0015C8  0E01               	movlw	1
  1397  0015CA  ECF1  F00E         	call	_lcd_gotoxy
  1398                           
  1399                           ;main.c: 47: b=b++;
  1400  0015CE  0E78               	movlw	low _buffer2
  1401  0015D0  6E09               	movwf	lcd_putrs@ptr,c
  1402  0015D2  0E00               	movlw	high _buffer2
  1403  0015D4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1404  0015D6  ECF2  F00D         	call	_lcd_putrs	;wreg free
  1405  0015DA  4A2D               	infsnz	_b,f,c
  1406  0015DC  2A2E               	incf	_b+1,f,c
  1407                           
  1408                           ;main.c: 48: if(b<7)
  1409  0015DE  BE2E               	btfsc	_b+1,7,c
  1410  0015E0  D006               	goto	l2359
  1411  0015E2  502E               	movf	_b+1,w,c
  1412  0015E4  E110               	bnz	l2363
  1413  0015E6  0E07               	movlw	7
  1414  0015E8  5C2D               	subwf	_b,w,c
  1415  0015EA  B0D8               	btfsc	status,0,c
  1416  0015EC  D00C               	goto	l2363
  1417  0015EE                     l2359:
  1418                           
  1419                           ;main.c: 49: {
  1420                           ;main.c: 50: lcd_gotoxy(1,1);
  1421  0015EE  0E01               	movlw	1
  1422  0015F0  6E05               	movwf	lcd_gotoxy@y,c
  1423  0015F2  0E01               	movlw	1
  1424  0015F4  ECF1  F00E         	call	_lcd_gotoxy
  1425                           
  1426                           ;main.c: 51: lcd_putrs("UNIMIC");
  1427  0015F8  0E34               	movlw	low STR_1
  1428  0015FA  6E09               	movwf	lcd_putrs@ptr,c
  1429  0015FC  0E0F               	movlw	high STR_1
  1430  0015FE  6E0A               	movwf	lcd_putrs@ptr+1,c
  1431  001600  ECF2  F00D         	call	_lcd_putrs	;wreg free
  1432  001604  D000               	goto	l2363
  1433  001606                     l2363:
  1434                           
  1435                           ;main.c: 52: }
  1436                           ;main.c: 53: if(b>6)
  1437  001606  BE2E               	btfsc	_b+1,7,c
  1438  001608  0012               	return	
  1439  00160A  502E               	movf	_b+1,w,c
  1440  00160C  E104               	bnz	u1650
  1441  00160E  0E07               	movlw	7
  1442  001610  5C2D               	subwf	_b,w,c
  1443  001612  A0D8               	btfss	status,0,c
  1444  001614  0012               	return	
  1445  001616                     u1650:
  1446                           
  1447                           ;main.c: 54: {
  1448                           ;main.c: 55: if(b==11){b=0;}
  1449  001616  0E0B               	movlw	11
  1450  001618  182D               	xorwf	_b,w,c
  1451  00161A  102E               	iorwf	_b+1,w,c
  1452  00161C  A4D8               	btfss	status,2,c
  1453  00161E  D005               	goto	l2369
  1454  001620  0E00               	movlw	0
  1455  001622  6E2E               	movwf	_b+1,c
  1456  001624  0E00               	movlw	0
  1457  001626  6E2D               	movwf	_b,c
  1458  001628  D000               	goto	l2369
  1459  00162A                     l2369:
  1460                           
  1461                           ;main.c: 56: lcd_gotoxy(1,1);
  1462  00162A  0E01               	movlw	1
  1463  00162C  6E05               	movwf	lcd_gotoxy@y,c
  1464  00162E  0E01               	movlw	1
  1465  001630  ECF1  F00E         	call	_lcd_gotoxy
  1466                           
  1467                           ;main.c: 57: lcd_putrs("      ");
  1468  001634  0E2D               	movlw	low STR_5
  1469  001636  6E09               	movwf	lcd_putrs@ptr,c
  1470  001638  0E0F               	movlw	high STR_5
  1471  00163A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1472  00163C  ECF2  F00D         	call	_lcd_putrs	;wreg free
  1473  001640  0012               	return	
  1474  001642  0012               	return		;funcret
  1475  001644                     __end_of_caratula:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           indf2	equ	0xFDF
  1486                           postinc2	equ	0xFDE
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _sprintf *****************
  1492 ;; Defined at:
  1493 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1496 ;;		 -> buffer2(20), 
  1497 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1498 ;;		 -> STR_3(15), STR_2(15), 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  tmpval          4    0        struct .
  1501 ;;  cp              3    0        PTR const unsigned char 
  1502 ;;  width           2   32[COMRAM] int 
  1503 ;;  val             2   29[COMRAM] unsigned int 
  1504 ;;  ap              2   26[COMRAM] PTR void [1]
  1505 ;;		 -> ?_sprintf(2), 
  1506 ;;  len             2    0        unsigned int 
  1507 ;;  c               1   34[COMRAM] char 
  1508 ;;  prec            1   31[COMRAM] char 
  1509 ;;  flag            1   28[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  2   12[COMRAM] int 
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1519 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1520 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1521 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1522 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1523 ;;Total ram usage:       23 bytes
  1524 ;; Hardware stack levels used:    1
  1525 ;; Hardware stack levels required when called:    1
  1526 ;; This function calls:
  1527 ;;		___lwdiv
  1528 ;;		___lwmod
  1529 ;;		___wmul
  1530 ;;		_isdigit
  1531 ;; This function is called by:
  1532 ;;		_caratula
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text6
  1537  000F3C                     __ptext6:
  1538                           	opt stack 0
  1539  000F3C                     _sprintf:
  1540                           	opt stack 28
  1541                           
  1542                           ;doprnt.c: 494: va_list ap;
  1543                           ;doprnt.c: 499: signed char c;
  1544                           ;doprnt.c: 501: int width;
  1545                           ;doprnt.c: 506: signed char prec;
  1546                           ;doprnt.c: 508: unsigned char flag;
  1547                           ;doprnt.c: 523: union {
  1548                           ;doprnt.c: 524: unsigned long vd;
  1549                           ;doprnt.c: 525: double integ;
  1550                           ;doprnt.c: 526: } tmpval;
  1551                           ;doprnt.c: 528: unsigned int val;
  1552                           ;doprnt.c: 529: unsigned len;
  1553                           ;doprnt.c: 530: const char * cp;
  1554                           ;doprnt.c: 533: *ap = __va_start();
  1555                           
  1556                           ;incstack = 0
  1557  000F3C  0E11               	movlw	low (?_sprintf+4)
  1558  000F3E  6E1B               	movwf	sprintf@ap,c
  1559  000F40  0E00               	movlw	high (?_sprintf+4)
  1560  000F42  6E1C               	movwf	sprintf@ap+1,c
  1561                           
  1562                           ;doprnt.c: 536: while(c = *f++) {
  1563  000F44  D117               	goto	l2259
  1564  000F46                     l2177:
  1565                           
  1566                           ;doprnt.c: 538: if(c != '%')
  1567  000F46  0E25               	movlw	37
  1568  000F48  1823               	xorwf	sprintf@c,w,c
  1569  000F4A  B4D8               	btfsc	status,2,c
  1570  000F4C  D009               	goto	l2183
  1571                           
  1572                           ;doprnt.c: 540: {
  1573                           ;doprnt.c: 541: ((*sp++ = (c)));
  1574  000F4E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1575  000F52  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1576  000F56  C023  FFDF         	movff	sprintf@c,indf2
  1577  000F5A  4A0D               	infsnz	sprintf@sp,f,c
  1578  000F5C  2A0E               	incf	sprintf@sp+1,f,c
  1579                           
  1580                           ;doprnt.c: 542: continue;
  1581  000F5E  D10A               	goto	l2259
  1582  000F60                     l2183:
  1583                           
  1584                           ;doprnt.c: 543: }
  1585                           ;doprnt.c: 546: width = 0;
  1586  000F60  0E00               	movlw	0
  1587  000F62  6E22               	movwf	sprintf@width+1,c
  1588  000F64  0E00               	movlw	0
  1589  000F66  6E21               	movwf	sprintf@width,c
  1590                           
  1591                           ;doprnt.c: 548: flag = 0;
  1592  000F68  0E00               	movlw	0
  1593  000F6A  6E1D               	movwf	sprintf@flag,c
  1594                           
  1595                           ;doprnt.c: 551: switch(*f) {
  1596                           
  1597                           ;doprnt.c: 550: for(;;) {
  1598  000F6C  D005               	goto	l2189
  1599  000F6E                     l2185:
  1600                           
  1601                           ;doprnt.c: 580: flag |= 0x04;
  1602  000F6E  841D               	bsf	sprintf@flag,2,c
  1603                           
  1604                           ;doprnt.c: 581: f++;
  1605  000F70  4A0F               	infsnz	sprintf@f,f,c
  1606  000F72  2A10               	incf	sprintf@f+1,f,c
  1607                           
  1608                           ;doprnt.c: 582: continue;
  1609  000F74  D001               	goto	l2189
  1610                           
  1611                           ;doprnt.c: 584: }
  1612  000F76  D00B               	goto	l2191
  1613  000F78                     l2189:
  1614  000F78  C00F  FFF6         	movff	sprintf@f,tblptrl
  1615  000F7C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1616  000F80                     	if	0	;tblptru may be non-zero
  1617  000F80                     	endif
  1618  000F80                     	if	0	;tblptru may be non-zero
  1619  000F80                     	endif
  1620  000F80  0008               	tblrd		*
  1621  000F82  50F5               	movf	tablat,w,c
  1622                           
  1623                           ; Switch size 1, requested type "space"
  1624                           ; Number of cases is 1, Range of values is 48 to 48
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; simple_byte            4     3 (average)
  1628                           ;	Chosen strategy is simple_byte
  1629  000F84  0A30               	xorlw	48	; case 48
  1630  000F86  B4D8               	btfsc	status,2,c
  1631  000F88  D7F2               	goto	l2185
  1632                           
  1633                           ;doprnt.c: 585: break;
  1634  000F8A  D001               	goto	l2191
  1635                           
  1636                           ;doprnt.c: 586: }
  1637  000F8C  D7F5               	goto	l2189
  1638  000F8E                     l2191:
  1639                           
  1640                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1641  000F8E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1642  000F92  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1643  000F96                     	if	0	;tblptru may be non-zero
  1644  000F96                     	endif
  1645  000F96                     	if	0	;tblptru may be non-zero
  1646  000F96                     	endif
  1647  000F96  0008               	tblrd		*
  1648  000F98  50F5               	movf	tablat,w,c
  1649  000F9A  EC03  F00F         	call	_isdigit
  1650  000F9E  A0D8               	btfss	status,0,c
  1651  000FA0  D03A               	goto	l2207
  1652                           
  1653                           ;doprnt.c: 598: width = 0;
  1654  000FA2  0E00               	movlw	0
  1655  000FA4  6E22               	movwf	sprintf@width+1,c
  1656  000FA6  0E00               	movlw	0
  1657  000FA8  6E21               	movwf	sprintf@width,c
  1658  000FAA  D000               	goto	l2195
  1659  000FAC                     l2195:
  1660                           
  1661                           ;doprnt.c: 600: width *= 10;
  1662  000FAC  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1663  000FB0  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1664  000FB4  0E00               	movlw	0
  1665  000FB6  6E04               	movwf	___wmul@multiplicand+1,c
  1666  000FB8  0E0A               	movlw	10
  1667  000FBA  6E03               	movwf	___wmul@multiplicand,c
  1668  000FBC  ECDD  F00E         	call	___wmul	;wreg free
  1669  000FC0  C001  F021         	movff	?___wmul,sprintf@width
  1670  000FC4  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1671                           
  1672                           ;doprnt.c: 601: width += *f++ - '0';
  1673  000FC8  0ED0               	movlw	208
  1674  000FCA  6E17               	movwf	??_sprintf& (0+255),c
  1675  000FCC  0EFF               	movlw	255
  1676  000FCE  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1677  000FD0  C00F  FFF6         	movff	sprintf@f,tblptrl
  1678  000FD4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1679  000FD8                     	if	0	;tblptru may be non-zero
  1680  000FD8                     	endif
  1681  000FD8                     	if	0	;tblptru may be non-zero
  1682  000FD8                     	endif
  1683  000FD8  0008               	tblrd		*
  1684  000FDA  50F5               	movf	tablat,w,c
  1685  000FDC  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1686  000FDE  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1687  000FE0  5017               	movf	??_sprintf,w,c
  1688  000FE2  2619               	addwf	??_sprintf+2,f,c
  1689  000FE4  5018               	movf	??_sprintf+1,w,c
  1690  000FE6  221A               	addwfc	??_sprintf+3,f,c
  1691  000FE8  5019               	movf	??_sprintf+2,w,c
  1692  000FEA  2621               	addwf	sprintf@width,f,c
  1693  000FEC  501A               	movf	??_sprintf+3,w,c
  1694  000FEE  2222               	addwfc	sprintf@width+1,f,c
  1695  000FF0  4A0F               	infsnz	sprintf@f,f,c
  1696  000FF2  2A10               	incf	sprintf@f+1,f,c
  1697                           
  1698                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1699  000FF4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1700  000FF8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1701  000FFC                     	if	0	;tblptru may be non-zero
  1702  000FFC                     	endif
  1703  000FFC                     	if	0	;tblptru may be non-zero
  1704  000FFC                     	endif
  1705  000FFC  0008               	tblrd		*
  1706  000FFE  50F5               	movf	tablat,w,c
  1707  001000  EC03  F00F         	call	_isdigit
  1708  001004  A0D8               	btfss	status,0,c
  1709  001006  D007               	goto	l2207
  1710  001008  D7D1               	goto	l2195
  1711                           
  1712                           ;doprnt.c: 608: }
  1713                           ;doprnt.c: 635: switch(c = *f++) {
  1714  00100A  D005               	goto	l2207
  1715                           
  1716                           ;doprnt.c: 638: goto alldone;
  1717                           
  1718                           ;doprnt.c: 637: case 0:
  1719  00100C  D0C1               	goto	l2261
  1720                           
  1721                           ;doprnt.c: 813: continue;
  1722                           
  1723                           ;doprnt.c: 802: default:
  1724  00100E  D0B2               	goto	l2259
  1725  001010                     l2203:
  1726                           
  1727                           ;doprnt.c: 818: flag |= 0xC0;
  1728  001010  0EC0               	movlw	192
  1729  001012  121D               	iorwf	sprintf@flag,f,c
  1730                           
  1731                           ;doprnt.c: 822: }
  1732                           
  1733                           ;doprnt.c: 819: break;
  1734  001014  D011               	goto	l2209
  1735  001016                     l2207:
  1736  001016  C00F  FFF6         	movff	sprintf@f,tblptrl
  1737  00101A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1738  00101E  4A0F               	infsnz	sprintf@f,f,c
  1739  001020  2A10               	incf	sprintf@f+1,f,c
  1740  001022                     	if	0	;tblptru may be non-zero
  1741  001022                     	endif
  1742  001022                     	if	0	;tblptru may be non-zero
  1743  001022                     	endif
  1744  001022  0008               	tblrd		*
  1745  001024  CFF5 F023          	movff	tablat,sprintf@c
  1746  001028  5023               	movf	sprintf@c,w,c
  1747                           
  1748                           ; Switch size 1, requested type "space"
  1749                           ; Number of cases is 2, Range of values is 0 to 117
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte            7     4 (average)
  1753                           ;	Chosen strategy is simple_byte
  1754  00102A  0A00               	xorlw	0	; case 0
  1755  00102C  B4D8               	btfsc	status,2,c
  1756  00102E  D0B0               	goto	l2261
  1757  001030  0A75               	xorlw	117	; case 117
  1758  001032  B4D8               	btfsc	status,2,c
  1759  001034  D7ED               	goto	l2203
  1760  001036  D09E               	goto	l2259
  1761  001038                     l2209:
  1762                           
  1763                           ;doprnt.c: 1273: {
  1764                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1765  001038  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1766  00103C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1767  001040  CFDE F01E          	movff	postinc2,sprintf@val
  1768  001044  CFDD F01F          	movff	postdec2,sprintf@val+1
  1769  001048  0E02               	movlw	2
  1770  00104A  261B               	addwf	sprintf@ap,f,c
  1771  00104C  0E00               	movlw	0
  1772  00104E  221C               	addwfc	sprintf@ap+1,f,c
  1773                           
  1774                           ;doprnt.c: 1287: }
  1775                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1776  001050  0E01               	movlw	1
  1777  001052  6E23               	movwf	sprintf@c,c
  1778  001054                     l2215:
  1779  001054  0E05               	movlw	5
  1780  001056  1823               	xorwf	sprintf@c,w,c
  1781  001058  B4D8               	btfsc	status,2,c
  1782  00105A  D016               	goto	l2227
  1783  00105C  D001               	goto	l2219
  1784  00105E  D014               	goto	l2227
  1785  001060                     l2219:
  1786                           
  1787                           ;doprnt.c: 1306: if(val < dpowers[c])
  1788  001060  5023               	movf	sprintf@c,w,c
  1789  001062  0D02               	mullw	2
  1790  001064  0E01               	movlw	low _dpowers
  1791  001066  24F3               	addwf	prodl,w,c
  1792  001068  6EF6               	movwf	tblptrl,c
  1793  00106A  0E0F               	movlw	high _dpowers
  1794  00106C  20F4               	addwfc	prodh,w,c
  1795  00106E  6EF7               	movwf	tblptrh,c
  1796  001070                     	if	0	;There are less than 3 active tblptr bytes
  1797  001070                     	endif
  1798  001070  0009               	tblrd		*+
  1799  001072  50F5               	movf	tablat,w,c
  1800  001074  5C1E               	subwf	sprintf@val,w,c
  1801  001076  0009               	tblrd		*+
  1802  001078  50F5               	movf	tablat,w,c
  1803  00107A  581F               	subwfb	sprintf@val+1,w,c
  1804  00107C  A0D8               	btfss	status,0,c
  1805  00107E  D004               	goto	l2227
  1806  001080  D001               	goto	l2223
  1807                           
  1808                           ;doprnt.c: 1307: break;
  1809  001082  D002               	goto	l2227
  1810  001084                     l2223:
  1811  001084  2A23               	incf	sprintf@c,f,c
  1812  001086  D7E6               	goto	l2215
  1813  001088                     l2227:
  1814                           
  1815                           ;doprnt.c: 1381: if(width > c)
  1816  001088  0E80               	movlw	128
  1817  00108A  BE23               	btfsc	sprintf@c,7,c
  1818  00108C  0E7F               	movlw	127
  1819  00108E  6E17               	movwf	??_sprintf& (0+255),c
  1820  001090  5021               	movf	sprintf@width,w,c
  1821  001092  5C23               	subwf	sprintf@c,w,c
  1822  001094  5022               	movf	sprintf@width+1,w,c
  1823  001096  0A80               	xorlw	128
  1824  001098  5817               	subwfb	??_sprintf& (0+255),w,c
  1825  00109A  B0D8               	btfsc	status,0,c
  1826  00109C  D007               	goto	l2231
  1827                           
  1828                           ;doprnt.c: 1382: width -= c;
  1829  00109E  5023               	movf	sprintf@c,w,c
  1830  0010A0  5E21               	subwf	sprintf@width,f,c
  1831  0010A2  0E00               	movlw	0
  1832  0010A4  BE23               	btfsc	sprintf@c,7,c
  1833  0010A6  0EFF               	movlw	255
  1834  0010A8  5A22               	subwfb	sprintf@width+1,f,c
  1835  0010AA  D005               	goto	l2233
  1836  0010AC                     l2231:
  1837                           
  1838                           ;doprnt.c: 1383: else
  1839                           ;doprnt.c: 1384: width = 0;
  1840  0010AC  0E00               	movlw	0
  1841  0010AE  6E22               	movwf	sprintf@width+1,c
  1842  0010B0  0E00               	movlw	0
  1843  0010B2  6E21               	movwf	sprintf@width,c
  1844  0010B4  D000               	goto	l2233
  1845  0010B6                     l2233:
  1846                           
  1847                           ;doprnt.c: 1387: if(flag & 0x04) {
  1848  0010B6  A41D               	btfss	sprintf@flag,2,c
  1849  0010B8  D015               	goto	l2243
  1850                           
  1851                           ;doprnt.c: 1415: if(width)
  1852  0010BA  5021               	movf	sprintf@width,w,c
  1853  0010BC  1022               	iorwf	sprintf@width+1,w,c
  1854  0010BE  B4D8               	btfsc	status,2,c
  1855  0010C0  D026               	goto	l286
  1856  0010C2                     l2237:
  1857                           
  1858                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1859  0010C2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1860  0010C6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1861  0010CA  0E30               	movlw	48
  1862  0010CC  6EDF               	movwf	indf2,c
  1863  0010CE  4A0D               	infsnz	sprintf@sp,f,c
  1864  0010D0  2A0E               	incf	sprintf@sp+1,f,c
  1865                           
  1866                           ;doprnt.c: 1418: while(--width);
  1867  0010D2  0621               	decf	sprintf@width,f,c
  1868  0010D4  A0D8               	btfss	status,0,c
  1869  0010D6  0622               	decf	sprintf@width+1,f,c
  1870  0010D8  5021               	movf	sprintf@width,w,c
  1871  0010DA  1022               	iorwf	sprintf@width+1,w,c
  1872  0010DC  B4D8               	btfsc	status,2,c
  1873  0010DE  D017               	goto	l286
  1874  0010E0  D7F0               	goto	l2237
  1875                           
  1876                           ;doprnt.c: 1420: } else
  1877  0010E2  D015               	goto	l286
  1878  0010E4                     l2243:
  1879                           
  1880                           ;doprnt.c: 1422: {
  1881                           ;doprnt.c: 1424: if(width
  1882                           ;doprnt.c: 1428: )
  1883  0010E4  5021               	movf	sprintf@width,w,c
  1884  0010E6  1022               	iorwf	sprintf@width+1,w,c
  1885  0010E8  B4D8               	btfsc	status,2,c
  1886  0010EA  D011               	goto	l286
  1887  0010EC                     l2245:
  1888                           
  1889                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1890  0010EC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1891  0010F0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1892  0010F4  0E20               	movlw	32
  1893  0010F6  6EDF               	movwf	indf2,c
  1894  0010F8  4A0D               	infsnz	sprintf@sp,f,c
  1895  0010FA  2A0E               	incf	sprintf@sp+1,f,c
  1896                           
  1897                           ;doprnt.c: 1431: while(--width);
  1898  0010FC  0621               	decf	sprintf@width,f,c
  1899  0010FE  A0D8               	btfss	status,0,c
  1900  001100  0622               	decf	sprintf@width+1,f,c
  1901  001102  5021               	movf	sprintf@width,w,c
  1902  001104  1022               	iorwf	sprintf@width+1,w,c
  1903  001106  B4D8               	btfsc	status,2,c
  1904  001108  D002               	goto	l286
  1905  00110A  D7F0               	goto	l2245
  1906  00110C  D000               	goto	l286
  1907  00110E                     l286:
  1908                           
  1909                           ;doprnt.c: 1469: }
  1910                           ;doprnt.c: 1472: prec = c;
  1911  00110E  C023  F020         	movff	sprintf@c,sprintf@prec
  1912                           
  1913                           ;doprnt.c: 1474: while(prec--) {
  1914  001112  D02A               	goto	l2257
  1915  001114                     l2251:
  1916                           
  1917                           ;doprnt.c: 1478: {
  1918                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1919  001114  5020               	movf	sprintf@prec,w,c
  1920  001116  0D02               	mullw	2
  1921  001118  0E01               	movlw	low _dpowers
  1922  00111A  24F3               	addwf	prodl,w,c
  1923  00111C  6EF6               	movwf	tblptrl,c
  1924  00111E  0E0F               	movlw	high _dpowers
  1925  001120  20F4               	addwfc	prodh,w,c
  1926  001122  6EF7               	movwf	tblptrh,c
  1927  001124                     	if	0	;There are less than 3 active tblptr bytes
  1928  001124                     	endif
  1929  001124  0009               	tblrd		*+
  1930  001126  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1931  00112A  000A               	tblrd		*-
  1932  00112C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1933  001130  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  1934  001134  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1935  001138  ECC4  F00D         	call	___lwdiv	;wreg free
  1936  00113C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1937  001140  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1938  001144  0E00               	movlw	0
  1939  001146  6E0B               	movwf	___lwmod@divisor+1,c
  1940  001148  0E0A               	movlw	10
  1941  00114A  6E0A               	movwf	___lwmod@divisor,c
  1942  00114C  EC1C  F00E         	call	___lwmod	;wreg free
  1943  001150  5008               	movf	?___lwmod,w,c
  1944  001152  0F30               	addlw	48
  1945  001154  6E23               	movwf	sprintf@c,c
  1946                           
  1947                           ;doprnt.c: 1523: }
  1948                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1949  001156  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1950  00115A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1951  00115E  C023  FFDF         	movff	sprintf@c,indf2
  1952  001162  4A0D               	infsnz	sprintf@sp,f,c
  1953  001164  2A0E               	incf	sprintf@sp+1,f,c
  1954  001166  D000               	goto	l2257
  1955  001168                     l2257:
  1956  001168  0620               	decf	sprintf@prec,f,c
  1957  00116A  2820               	incf	sprintf@prec,w,c
  1958  00116C  B4D8               	btfsc	status,2,c
  1959  00116E  D002               	goto	l2259
  1960  001170  D7D1               	goto	l2251
  1961  001172  D000               	goto	l2259
  1962  001174                     l2259:
  1963  001174  C00F  FFF6         	movff	sprintf@f,tblptrl
  1964  001178  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1965  00117C  4A0F               	infsnz	sprintf@f,f,c
  1966  00117E  2A10               	incf	sprintf@f+1,f,c
  1967  001180                     	if	0	;tblptru may be non-zero
  1968  001180                     	endif
  1969  001180                     	if	0	;tblptru may be non-zero
  1970  001180                     	endif
  1971  001180  0008               	tblrd		*
  1972  001182  CFF5 F023          	movff	tablat,sprintf@c
  1973  001186  5023               	movf	sprintf@c,w,c
  1974  001188  B4D8               	btfsc	status,2,c
  1975  00118A  D002               	goto	l2261
  1976  00118C  D6DC               	goto	l2177
  1977  00118E  D000               	goto	l2261
  1978  001190                     l2261:
  1979                           
  1980                           ;doprnt.c: 1538: *sp = 0;
  1981  001190  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1982  001194  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1983  001198  0E00               	movlw	0
  1984  00119A  6EDF               	movwf	indf2,c
  1985  00119C  0012               	return	
  1986                           
  1987                           ;doprnt.c: 1540: return 0;
  1988                           ;	Return value of _sprintf is never used
  1989  00119E  0012               	return		;funcret
  1990  0011A0                     __end_of_sprintf:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1l	equ	0xFE1
  2002                           indf2	equ	0xFDF
  2003                           postinc2	equ	0xFDE
  2004                           postdec2	equ	0xFDD
  2005                           fsr2h	equ	0xFDA
  2006                           fsr2l	equ	0xFD9
  2007                           status	equ	0xFD8
  2008                           
  2009 ;; *************** function _isdigit *****************
  2010 ;; Defined at:
  2011 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  c               1    wreg     unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  c               1    2[COMRAM] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;		None               void
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2028 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2029 ;;Total ram usage:        3 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_sprintf
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text7
  2039  001E06                     __ptext7:
  2040                           	opt stack 0
  2041  001E06                     _isdigit:
  2042                           	opt stack 28
  2043                           
  2044                           ;incstack = 0
  2045                           ;isdigit@c stored from wreg
  2046  001E06  6E03               	movwf	isdigit@c,c
  2047  001E08  0E00               	movlw	0
  2048  001E0A  6E02               	movwf	_isdigit$1836,c
  2049  001E0C  0E3A               	movlw	58
  2050  001E0E  6003               	cpfslt	isdigit@c,c
  2051  001E10  D006               	goto	l1965
  2052  001E12  0E2F               	movlw	47
  2053  001E14  6403               	cpfsgt	isdigit@c,c
  2054  001E16  D003               	goto	l1965
  2055  001E18  0E01               	movlw	1
  2056  001E1A  6E02               	movwf	_isdigit$1836,c
  2057  001E1C  D000               	goto	l1965
  2058  001E1E                     l1965:
  2059  001E1E  C002  F001         	movff	_isdigit$1836,??_isdigit
  2060  001E22  3001               	rrcf	??_isdigit,w,c
  2061  001E24  0012               	return	
  2062  001E26  0012               	return		;funcret
  2063  001E28                     __end_of_isdigit:
  2064                           	opt stack 0
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           prodh	equ	0xFF4
  2070                           prodl	equ	0xFF3
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postdec1	equ	0xFE5
  2074                           fsr1l	equ	0xFE1
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           postdec2	equ	0xFDD
  2078                           fsr2h	equ	0xFDA
  2079                           fsr2l	equ	0xFD9
  2080                           status	equ	0xFD8
  2081                           
  2082 ;; *************** function ___wmul *****************
  2083 ;; Defined at:
  2084 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  multiplier      2    0[COMRAM] unsigned int 
  2087 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  product         2    4[COMRAM] unsigned int 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2    0[COMRAM] unsigned int 
  2092 ;; Registers used:
  2093 ;;		wreg, status,2, status,0, prodl, prodh
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2102 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2103 ;;Total ram usage:        6 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_sprintf
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text8
  2113  001DBA                     __ptext8:
  2114                           	opt stack 0
  2115  001DBA                     ___wmul:
  2116                           	opt stack 28
  2117                           
  2118                           ;incstack = 0
  2119  001DBA  5001               	movf	___wmul@multiplier,w,c
  2120  001DBC  0203               	mulwf	___wmul@multiplicand,c
  2121  001DBE  CFF3 F005          	movff	prodl,___wmul@product
  2122  001DC2  CFF4 F006          	movff	prodh,___wmul@product+1
  2123  001DC6  5001               	movf	___wmul@multiplier,w,c
  2124  001DC8  0204               	mulwf	___wmul@multiplicand+1,c
  2125  001DCA  50F3               	movf	prodl,w,c
  2126  001DCC  2606               	addwf	___wmul@product+1,f,c
  2127  001DCE  5002               	movf	___wmul@multiplier+1,w,c
  2128  001DD0  0203               	mulwf	___wmul@multiplicand,c
  2129  001DD2  50F3               	movf	prodl,w,c
  2130  001DD4  2606               	addwf	___wmul@product+1,f,c
  2131  001DD6  C005  F001         	movff	___wmul@product,?___wmul
  2132  001DDA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2133  001DDE  0012               	return	
  2134  001DE0  0012               	return		;funcret
  2135  001DE2                     __end_of___wmul:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           tblptrh	equ	0xFF7
  2139                           tblptrl	equ	0xFF6
  2140                           tablat	equ	0xFF5
  2141                           prodh	equ	0xFF4
  2142                           prodl	equ	0xFF3
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           postdec2	equ	0xFDD
  2150                           fsr2h	equ	0xFDA
  2151                           fsr2l	equ	0xFD9
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function ___lwmod *****************
  2155 ;; Defined at:
  2156 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  dividend        2    7[COMRAM] unsigned int 
  2159 ;;  divisor         2    9[COMRAM] unsigned int 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  counter         1   11[COMRAM] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  2    7[COMRAM] unsigned int 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2175 ;;Total ram usage:        5 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_sprintf
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text9
  2185  001C38                     __ptext9:
  2186                           	opt stack 0
  2187  001C38                     ___lwmod:
  2188                           	opt stack 28
  2189                           
  2190                           ;incstack = 0
  2191  001C38  500A               	movf	___lwmod@divisor,w,c
  2192  001C3A  100B               	iorwf	___lwmod@divisor+1,w,c
  2193  001C3C  B4D8               	btfsc	status,2,c
  2194  001C3E  D01D               	goto	l940
  2195  001C40  0E01               	movlw	1
  2196  001C42  6E0C               	movwf	___lwmod@counter,c
  2197  001C44  D005               	goto	l2047
  2198  001C46                     l2045:
  2199  001C46  90D8               	bcf	status,0,c
  2200  001C48  360A               	rlcf	___lwmod@divisor,f,c
  2201  001C4A  360B               	rlcf	___lwmod@divisor+1,f,c
  2202  001C4C  2A0C               	incf	___lwmod@counter,f,c
  2203  001C4E  D000               	goto	l2047
  2204  001C50                     l2047:
  2205  001C50  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2206  001C52  D002               	goto	l2049
  2207  001C54  D7F8               	goto	l2045
  2208  001C56  D000               	goto	l2049
  2209  001C58                     l2049:
  2210  001C58  500A               	movf	___lwmod@divisor,w,c
  2211  001C5A  5C08               	subwf	___lwmod@dividend,w,c
  2212  001C5C  500B               	movf	___lwmod@divisor+1,w,c
  2213  001C5E  5809               	subwfb	___lwmod@dividend+1,w,c
  2214  001C60  A0D8               	btfss	status,0,c
  2215  001C62  D005               	goto	l2053
  2216  001C64  500A               	movf	___lwmod@divisor,w,c
  2217  001C66  5E08               	subwf	___lwmod@dividend,f,c
  2218  001C68  500B               	movf	___lwmod@divisor+1,w,c
  2219  001C6A  5A09               	subwfb	___lwmod@dividend+1,f,c
  2220  001C6C  D000               	goto	l2053
  2221  001C6E                     l2053:
  2222  001C6E  90D8               	bcf	status,0,c
  2223  001C70  320B               	rrcf	___lwmod@divisor+1,f,c
  2224  001C72  320A               	rrcf	___lwmod@divisor,f,c
  2225  001C74  2E0C               	decfsz	___lwmod@counter,f,c
  2226  001C76  D7F0               	goto	l2049
  2227  001C78  D000               	goto	l940
  2228  001C7A                     l940:
  2229  001C7A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2230  001C7E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2231  001C82  0012               	return		;funcret
  2232  001C84                     __end_of___lwmod:
  2233                           	opt stack 0
  2234                           tblptru	equ	0xFF8
  2235                           tblptrh	equ	0xFF7
  2236                           tblptrl	equ	0xFF6
  2237                           tablat	equ	0xFF5
  2238                           prodh	equ	0xFF4
  2239                           prodl	equ	0xFF3
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postdec1	equ	0xFE5
  2243                           fsr1l	equ	0xFE1
  2244                           indf2	equ	0xFDF
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function ___lwdiv *****************
  2252 ;; Defined at:
  2253 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  dividend        2    0[COMRAM] unsigned int 
  2256 ;;  divisor         2    2[COMRAM] unsigned int 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  quotient        2    4[COMRAM] unsigned int 
  2259 ;;  counter         1    6[COMRAM] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    0[COMRAM] unsigned int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2270 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2272 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;Total ram usage:        7 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_sprintf
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text10
  2283  001B88                     __ptext10:
  2284                           	opt stack 0
  2285  001B88                     ___lwdiv:
  2286                           	opt stack 28
  2287                           
  2288                           ;incstack = 0
  2289  001B88  0E00               	movlw	0
  2290  001B8A  6E06               	movwf	___lwdiv@quotient+1,c
  2291  001B8C  0E00               	movlw	0
  2292  001B8E  6E05               	movwf	___lwdiv@quotient,c
  2293  001B90  5003               	movf	___lwdiv@divisor,w,c
  2294  001B92  1004               	iorwf	___lwdiv@divisor+1,w,c
  2295  001B94  B4D8               	btfsc	status,2,c
  2296  001B96  D021               	goto	l930
  2297  001B98  0E01               	movlw	1
  2298  001B9A  6E07               	movwf	___lwdiv@counter,c
  2299  001B9C  D005               	goto	l2027
  2300  001B9E                     l2025:
  2301  001B9E  90D8               	bcf	status,0,c
  2302  001BA0  3603               	rlcf	___lwdiv@divisor,f,c
  2303  001BA2  3604               	rlcf	___lwdiv@divisor+1,f,c
  2304  001BA4  2A07               	incf	___lwdiv@counter,f,c
  2305  001BA6  D000               	goto	l2027
  2306  001BA8                     l2027:
  2307  001BA8  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2308  001BAA  D002               	goto	l2029
  2309  001BAC  D7F8               	goto	l2025
  2310  001BAE  D000               	goto	l2029
  2311  001BB0                     l2029:
  2312  001BB0  90D8               	bcf	status,0,c
  2313  001BB2  3605               	rlcf	___lwdiv@quotient,f,c
  2314  001BB4  3606               	rlcf	___lwdiv@quotient+1,f,c
  2315  001BB6  5003               	movf	___lwdiv@divisor,w,c
  2316  001BB8  5C01               	subwf	___lwdiv@dividend,w,c
  2317  001BBA  5004               	movf	___lwdiv@divisor+1,w,c
  2318  001BBC  5802               	subwfb	___lwdiv@dividend+1,w,c
  2319  001BBE  A0D8               	btfss	status,0,c
  2320  001BC0  D006               	goto	l2037
  2321  001BC2  5003               	movf	___lwdiv@divisor,w,c
  2322  001BC4  5E01               	subwf	___lwdiv@dividend,f,c
  2323  001BC6  5004               	movf	___lwdiv@divisor+1,w,c
  2324  001BC8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2325  001BCA  8005               	bsf	___lwdiv@quotient,0,c
  2326  001BCC  D000               	goto	l2037
  2327  001BCE                     l2037:
  2328  001BCE  90D8               	bcf	status,0,c
  2329  001BD0  3204               	rrcf	___lwdiv@divisor+1,f,c
  2330  001BD2  3203               	rrcf	___lwdiv@divisor,f,c
  2331  001BD4  2E07               	decfsz	___lwdiv@counter,f,c
  2332  001BD6  D7EC               	goto	l2029
  2333  001BD8  D000               	goto	l930
  2334  001BDA                     l930:
  2335  001BDA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2336  001BDE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2337  001BE2  0012               	return		;funcret
  2338  001BE4                     __end_of___lwdiv:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _lcd_putrs *****************
  2358 ;; Defined at:
  2359 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2362 ;;		 -> STR_5(7), STR_4(7), buffer2(20), STR_1(7), 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;		None               void
  2367 ;; Registers used:
  2368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2378 ;;Total ram usage:        2 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    4
  2381 ;; This function calls:
  2382 ;;		_lcd_putc
  2383 ;; This function is called by:
  2384 ;;		_caratula
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text11
  2389  001BE4                     __ptext11:
  2390                           	opt stack 0
  2391  001BE4                     _lcd_putrs:
  2392                           	opt stack 25
  2393                           
  2394                           ;unmc_lcd_216.c: 223: while(*ptr){
  2395                           
  2396                           ;incstack = 0
  2397  001BE4  D015               	goto	l2173
  2398  001BE6                     l2169:
  2399                           
  2400                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2401  001BE6  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2402  001BEA  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2403  001BEE  6AF8               	clrf	tblptru,c
  2404  001BF0  0E0E               	movlw	(high __ramtop+-1)
  2405  001BF2  64F7               	cpfsgt	tblptrh,c
  2406  001BF4  D003               	bra	u1437
  2407  001BF6  0008               	tblrd		*
  2408  001BF8  50F5               	movf	tablat,w,c
  2409  001BFA  D005               	bra	u1430
  2410  001BFC                     u1437:
  2411  001BFC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2412  001C00  CFF7 FFEA          	movff	tblptrh,fsr0h
  2413  001C04  50EF               	movf	indf0,w,c
  2414  001C06                     u1430:
  2415  001C06  EC42  F00E         	call	_lcd_putc
  2416  001C0A  4A09               	infsnz	lcd_putrs@ptr,f,c
  2417  001C0C  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2418  001C0E  D000               	goto	l2173
  2419  001C10                     l2173:
  2420  001C10  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2421  001C14  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2422  001C18  6AF8               	clrf	tblptru,c
  2423  001C1A  0E0E               	movlw	(high __ramtop+-1)
  2424  001C1C  64F7               	cpfsgt	tblptrh,c
  2425  001C1E  D003               	bra	u1447
  2426  001C20  0008               	tblrd		*
  2427  001C22  50F5               	movf	tablat,w,c
  2428  001C24  D005               	bra	u1440
  2429  001C26                     u1447:
  2430  001C26  CFF6 FFE9          	movff	tblptrl,fsr0l
  2431  001C2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2432  001C2E  50EF               	movf	indf0,w,c
  2433  001C30                     u1440:
  2434  001C30  0900               	iorlw	0
  2435  001C32  A4D8               	btfss	status,2,c
  2436  001C34  D7D8               	goto	l2169
  2437  001C36  0012               	return		;funcret
  2438  001C38                     __end_of_lcd_putrs:
  2439                           	opt stack 0
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           indf0	equ	0xFEF
  2447                           postinc0	equ	0xFEE
  2448                           fsr0h	equ	0xFEA
  2449                           fsr0l	equ	0xFE9
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           indf2	equ	0xFDF
  2454                           postinc2	equ	0xFDE
  2455                           postdec2	equ	0xFDD
  2456                           fsr2h	equ	0xFDA
  2457                           fsr2l	equ	0xFD9
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function _lcd_putc *****************
  2461 ;; Defined at:
  2462 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  c               1    wreg     unsigned char 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  c               1    7[COMRAM] unsigned char 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;		None               void
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2480 ;;Total ram usage:        1 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    3
  2483 ;; This function calls:
  2484 ;;		_lcd_gotoxy
  2485 ;;		_lcd_send_byte
  2486 ;; This function is called by:
  2487 ;;		_lcd_putrs
  2488 ;;		_lcd_puts
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text12
  2493  001C84                     __ptext12:
  2494                           	opt stack 0
  2495  001C84                     _lcd_putc:
  2496                           	opt stack 25
  2497                           
  2498                           ;incstack = 0
  2499                           ;lcd_putc@c stored from wreg
  2500  001C84  6E08               	movwf	lcd_putc@c,c
  2501                           
  2502                           ;unmc_lcd_216.c: 173: switch(c){
  2503  001C86  D018               	goto	l1955
  2504  001C88                     l1945:
  2505                           
  2506                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2507  001C88  0E01               	movlw	1
  2508  001C8A  6E03               	movwf	lcd_send_byte@n,c
  2509  001C8C  0E00               	movlw	0
  2510  001C8E  ECAE  F00E         	call	_lcd_send_byte
  2511                           
  2512                           ;unmc_lcd_216.c: 176: break;
  2513  001C92  0012               	return	
  2514  001C94                     l1947:
  2515                           
  2516                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2517  001C94  0E02               	movlw	2
  2518  001C96  6E05               	movwf	lcd_gotoxy@y,c
  2519  001C98  0E01               	movlw	1
  2520  001C9A  ECF1  F00E         	call	_lcd_gotoxy
  2521                           
  2522                           ;unmc_lcd_216.c: 179: break;
  2523  001C9E  0012               	return	
  2524  001CA0                     l1949:
  2525                           
  2526                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2527  001CA0  0E10               	movlw	16
  2528  001CA2  6E03               	movwf	lcd_send_byte@n,c
  2529  001CA4  0E00               	movlw	0
  2530  001CA6  ECAE  F00E         	call	_lcd_send_byte
  2531                           
  2532                           ;unmc_lcd_216.c: 182: break;
  2533  001CAA  0012               	return	
  2534  001CAC                     l1951:
  2535                           
  2536                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2537  001CAC  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2538  001CB0  0E01               	movlw	1
  2539  001CB2  ECAE  F00E         	call	_lcd_send_byte
  2540                           
  2541                           ;unmc_lcd_216.c: 186: }
  2542                           
  2543                           ;unmc_lcd_216.c: 185: break;
  2544  001CB6  0012               	return	
  2545  001CB8                     l1955:
  2546  001CB8  5008               	movf	lcd_putc@c,w,c
  2547                           
  2548                           ; Switch size 1, requested type "space"
  2549                           ; Number of cases is 3, Range of values is 8 to 12
  2550                           ; switch strategies available:
  2551                           ; Name         Instructions Cycles
  2552                           ; simple_byte           10     6 (average)
  2553                           ;	Chosen strategy is simple_byte
  2554  001CBA  0A08               	xorlw	8	; case 8
  2555  001CBC  B4D8               	btfsc	status,2,c
  2556  001CBE  D7F0               	goto	l1949
  2557  001CC0  0A02               	xorlw	2	; case 10
  2558  001CC2  B4D8               	btfsc	status,2,c
  2559  001CC4  D7E7               	goto	l1947
  2560  001CC6  0A06               	xorlw	6	; case 12
  2561  001CC8  B4D8               	btfsc	status,2,c
  2562  001CCA  D7DE               	goto	l1945
  2563  001CCC  D7EF               	goto	l1951
  2564  001CCE  0012               	return		;funcret
  2565  001CD0                     __end_of_lcd_putc:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           indf0	equ	0xFEF
  2574                           postinc0	equ	0xFEE
  2575                           fsr0h	equ	0xFEA
  2576                           fsr0l	equ	0xFE9
  2577                           wreg	equ	0xFE8
  2578                           postdec1	equ	0xFE5
  2579                           fsr1l	equ	0xFE1
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _lcd_gotoxy *****************
  2588 ;; Defined at:
  2589 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  x               1    wreg     unsigned char 
  2592 ;;  y               1    4[COMRAM] unsigned char 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  x               1    5[COMRAM] unsigned char 
  2595 ;;  address         1    6[COMRAM] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;		None               void
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2605 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2609 ;;Total ram usage:        3 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    2
  2612 ;; This function calls:
  2613 ;;		_lcd_send_byte
  2614 ;; This function is called by:
  2615 ;;		_caratula
  2616 ;;		_main
  2617 ;;		_lcd_putc
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text13
  2622  001DE2                     __ptext13:
  2623                           	opt stack 0
  2624  001DE2                     _lcd_gotoxy:
  2625                           	opt stack 28
  2626                           
  2627                           ;incstack = 0
  2628                           ;lcd_gotoxy@x stored from wreg
  2629  001DE2  6E06               	movwf	lcd_gotoxy@x,c
  2630                           
  2631                           ;unmc_lcd_216.c: 159: int8 address;
  2632                           ;unmc_lcd_216.c: 161: if(y != 1)
  2633  001DE4  0405               	decf	lcd_gotoxy@y,w,c
  2634  001DE6  B4D8               	btfsc	status,2,c
  2635  001DE8  D002               	goto	l1801
  2636                           
  2637                           ;unmc_lcd_216.c: 162: address = 0x40;
  2638  001DEA  0E40               	movlw	64
  2639  001DEC  D001               	goto	L1
  2640  001DEE                     l1801:
  2641                           
  2642                           ;unmc_lcd_216.c: 163: else
  2643                           ;unmc_lcd_216.c: 164: address=0;
  2644  001DEE  0E00               	movlw	0
  2645  001DF0                     L1:
  2646  001DF0  6E07               	movwf	lcd_gotoxy@address,c
  2647  001DF2  D000               	goto	l1803
  2648  001DF4                     l1803:
  2649                           
  2650                           ;unmc_lcd_216.c: 166: address += x-1;
  2651  001DF4  0406               	decf	lcd_gotoxy@x,w,c
  2652  001DF6  2607               	addwf	lcd_gotoxy@address,f,c
  2653                           
  2654                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2655  001DF8  5007               	movf	lcd_gotoxy@address,w,c
  2656  001DFA  0980               	iorlw	128
  2657  001DFC  6E03               	movwf	lcd_send_byte@n,c
  2658  001DFE  0E00               	movlw	0
  2659  001E00  ECAE  F00E         	call	_lcd_send_byte
  2660  001E04  0012               	return		;funcret
  2661  001E06                     __end_of_lcd_gotoxy:
  2662                           	opt stack 0
  2663                           tblptru	equ	0xFF8
  2664                           tblptrh	equ	0xFF7
  2665                           tblptrl	equ	0xFF6
  2666                           tablat	equ	0xFF5
  2667                           prodh	equ	0xFF4
  2668                           prodl	equ	0xFF3
  2669                           indf0	equ	0xFEF
  2670                           postinc0	equ	0xFEE
  2671                           fsr0h	equ	0xFEA
  2672                           fsr0l	equ	0xFE9
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1l	equ	0xFE1
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           fsr2h	equ	0xFDA
  2680                           fsr2l	equ	0xFD9
  2681                           status	equ	0xFD8
  2682                           
  2683 ;; *************** function _Setup *****************
  2684 ;; Defined at:
  2685 ;;		line 67 in file "main.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;		None               void
  2692 ;; Registers used:
  2693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    3
  2706 ;; This function calls:
  2707 ;;		_Write_RTC
  2708 ;;		_lcd_comand
  2709 ;;		_lcd_init
  2710 ;; This function is called by:
  2711 ;;		_main
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text14
  2716  001CD0                     __ptext14:
  2717                           	opt stack 0
  2718  001CD0                     _Setup:
  2719                           	opt stack 27
  2720                           
  2721                           ;main.c: 69: OSCTUNEbits.INTSRC=1;
  2722                           
  2723                           ;incstack = 0
  2724  001CD0  8E9B               	bsf	3995,7,c	;volatile
  2725                           
  2726                           ;main.c: 70: OSCTUNEbits.PLLEN=0;
  2727  001CD2  9C9B               	bcf	3995,6,c	;volatile
  2728                           
  2729                           ;main.c: 71: OSCCONbits.IRCF0=1;
  2730  001CD4  88D3               	bsf	4051,4,c	;volatile
  2731                           
  2732                           ;main.c: 72: OSCCONbits.IRCF1=1;
  2733  001CD6  8AD3               	bsf	4051,5,c	;volatile
  2734                           
  2735                           ;main.c: 73: OSCCONbits.IRCF2=1;
  2736  001CD8  8CD3               	bsf	4051,6,c	;volatile
  2737                           
  2738                           ;main.c: 74: OSCCONbits.SCS0=0;
  2739  001CDA  90D3               	bcf	4051,0,c	;volatile
  2740                           
  2741                           ;main.c: 75: OSCCONbits.SCS1=0;
  2742  001CDC  92D3               	bcf	4051,1,c	;volatile
  2743                           
  2744                           ;main.c: 76: TRISA = 0b11111111;
  2745  001CDE  6892               	setf	3986,c	;volatile
  2746                           
  2747                           ;main.c: 77: TRISB = 0;
  2748  001CE0  0E00               	movlw	0
  2749  001CE2  6E93               	movwf	3987,c	;volatile
  2750                           
  2751                           ;main.c: 78: TRISC = 0b00000111;
  2752  001CE4  0E07               	movlw	7
  2753  001CE6  6E94               	movwf	3988,c	;volatile
  2754                           
  2755                           ;main.c: 82: ANCON0=0b11111111;
  2756  001CE8  010F               	movlb	15	; () banked
  2757  001CEA  6948               	setf	72,b	;volatile
  2758                           
  2759                           ;main.c: 83: ANCON0=0b10010111;
  2760  001CEC  0E97               	movlw	151
  2761  001CEE  010F               	movlb	15	; () banked
  2762  001CF0  6F48               	movwf	72,b	;volatile
  2763                           
  2764                           ;main.c: 84: ADCON0=0b00101101;
  2765  001CF2  0E2D               	movlw	45
  2766  001CF4  6EC2               	movwf	4034,c	;volatile
  2767                           
  2768                           ;main.c: 85: ADCON1=0b00010000;
  2769  001CF6  0E10               	movlw	16
  2770  001CF8  6EC1               	movwf	4033,c	;volatile
  2771                           
  2772                           ; BSR set to: 15
  2773                           ;main.c: 86: RTCCFGbits.RTCEN=1;
  2774  001CFA  010F               	movlb	15	; () banked
  2775  001CFC  8F3F               	bsf	63,7,b	;volatile
  2776                           
  2777                           ; BSR set to: 15
  2778                           ;main.c: 87: RTCCFGbits.RTCWREN=1;
  2779  001CFE  010F               	movlb	15	; () banked
  2780  001D00  8B3F               	bsf	63,5,b	;volatile
  2781                           
  2782                           ; BSR set to: 15
  2783                           ;main.c: 88: T1CONbits.T1OSCEN=1;
  2784  001D02  86CD               	bsf	4045,3,c	;volatile
  2785                           
  2786                           ; BSR set to: 15
  2787                           ;main.c: 89: Write_RTC();
  2788  001D04  ECD0  F008         	call	_Write_RTC	;wreg free
  2789                           
  2790                           ;main.c: 90: lcd_init();
  2791  001D08  EC12  F00D         	call	_lcd_init	;wreg free
  2792                           
  2793                           ;main.c: 91: lcd_comand(0b00001111);
  2794  001D0C  0E0F               	movlw	15
  2795  001D0E  EC39  F00F         	call	_lcd_comand
  2796                           
  2797                           ;main.c: 92: LATBbits.LATB1 = 0;;
  2798  001D12  928A               	bcf	3978,1,c	;volatile
  2799                           
  2800                           ;main.c: 93: LATBbits.LATB0 = 0;;
  2801  001D14  908A               	bcf	3978,0,c	;volatile
  2802  001D16  0012               	return		;funcret
  2803  001D18                     __end_of_Setup:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           indf0	equ	0xFEF
  2812                           postinc0	equ	0xFEE
  2813                           fsr0h	equ	0xFEA
  2814                           fsr0l	equ	0xFE9
  2815                           wreg	equ	0xFE8
  2816                           postdec1	equ	0xFE5
  2817                           fsr1l	equ	0xFE1
  2818                           indf2	equ	0xFDF
  2819                           postinc2	equ	0xFDE
  2820                           postdec2	equ	0xFDD
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _lcd_init *****************
  2826 ;; Defined at:
  2827 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  i               1    4[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;		None               void
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    2
  2848 ;; This function calls:
  2849 ;;		_Delay1KTCYx
  2850 ;;		_lcd_send_byte
  2851 ;;		_lcd_send_nibble
  2852 ;; This function is called by:
  2853 ;;		_Setup
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text15
  2858  001A24                     __ptext15:
  2859                           	opt stack 0
  2860  001A24                     _lcd_init:
  2861                           	opt stack 27
  2862                           
  2863                           ;unmc_lcd_216.c: 120: int8 i;
  2864                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2865                           
  2866                           ;incstack = 0
  2867  001A24  9693               	bcf	3987,3,c	;volatile
  2868                           
  2869                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2870  001A26  9493               	bcf	3987,2,c	;volatile
  2871                           
  2872                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2873  001A28  968A               	bcf	3978,3,c	;volatile
  2874                           
  2875                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2876  001A2A  948A               	bcf	3978,2,c	;volatile
  2877                           
  2878                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2879  001A2C  9893               	bcf	3987,4,c	;volatile
  2880                           
  2881                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2882  001A2E  9A93               	bcf	3987,5,c	;volatile
  2883                           
  2884                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2885  001A30  9C93               	bcf	3987,6,c	;volatile
  2886                           
  2887                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2888  001A32  9E93               	bcf	3987,7,c	;volatile
  2889                           
  2890                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2891  001A34  0E0A               	movlw	10
  2892  001A36  EC1E  F00F         	call	_Delay1KTCYx
  2893                           
  2894                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2895  001A3A  0E0A               	movlw	10
  2896  001A3C  EC1E  F00F         	call	_Delay1KTCYx
  2897                           
  2898                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2899  001A40  0E0A               	movlw	10
  2900  001A42  EC1E  F00F         	call	_Delay1KTCYx
  2901                           
  2902                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2903  001A46  0E00               	movlw	0
  2904  001A48  6E05               	movwf	lcd_init@i,c
  2905  001A4A                     l2271:
  2906  001A4A  0E02               	movlw	2
  2907  001A4C  6405               	cpfsgt	lcd_init@i,c
  2908  001A4E  D001               	goto	l2275
  2909  001A50  D008               	goto	l2281
  2910  001A52                     l2275:
  2911                           
  2912                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2913  001A52  0E03               	movlw	3
  2914  001A54  EC52  F00D         	call	_lcd_send_nibble
  2915                           
  2916                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2917  001A58  0E0A               	movlw	10
  2918  001A5A  EC1E  F00F         	call	_Delay1KTCYx
  2919  001A5E  2A05               	incf	lcd_init@i,f,c
  2920  001A60  D7F4               	goto	l2271
  2921  001A62                     l2281:
  2922                           
  2923                           ;unmc_lcd_216.c: 146: }
  2924                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2925  001A62  0E02               	movlw	2
  2926  001A64  EC52  F00D         	call	_lcd_send_nibble
  2927                           
  2928                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2929  001A68  0E00               	movlw	0
  2930  001A6A  6E05               	movwf	lcd_init@i,c
  2931  001A6C  0E03               	movlw	3
  2932  001A6E  6405               	cpfsgt	lcd_init@i,c
  2933  001A70  D002               	goto	l2289
  2934  001A72  0012               	return	
  2935  001A74  0012               	return	
  2936  001A76                     l2289:
  2937                           
  2938                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2939  001A76  5005               	movf	lcd_init@i,w,c
  2940  001A78  0D01               	mullw	1
  2941  001A7A  0E0B               	movlw	low _LCD_INIT_STRING
  2942  001A7C  24F3               	addwf	prodl,w,c
  2943  001A7E  6EF6               	movwf	tblptrl,c
  2944  001A80  0E0F               	movlw	high _LCD_INIT_STRING
  2945  001A82  20F4               	addwfc	prodh,w,c
  2946  001A84  6EF7               	movwf	tblptrh,c
  2947  001A86                     	if	0	;There are less than 3 active tblptr bytes
  2948  001A86                     	endif
  2949  001A86  0008               	tblrd		*
  2950  001A88  CFF5 F003          	movff	tablat,lcd_send_byte@n
  2951  001A8C  0E00               	movlw	0
  2952  001A8E  ECAE  F00E         	call	_lcd_send_byte
  2953                           
  2954                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2955  001A92  0E0A               	movlw	10
  2956  001A94  EC1E  F00F         	call	_Delay1KTCYx
  2957  001A98  2A05               	incf	lcd_init@i,f,c
  2958  001A9A  0E03               	movlw	3
  2959  001A9C  6405               	cpfsgt	lcd_init@i,c
  2960  001A9E  D7EB               	goto	l2289
  2961  001AA0  0012               	return	
  2962  001AA2  0012               	return		;funcret
  2963  001AA4                     __end_of_lcd_init:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           indf0	equ	0xFEF
  2972                           postinc0	equ	0xFEE
  2973                           fsr0h	equ	0xFEA
  2974                           fsr0l	equ	0xFE9
  2975                           wreg	equ	0xFE8
  2976                           postdec1	equ	0xFE5
  2977                           fsr1l	equ	0xFE1
  2978                           indf2	equ	0xFDF
  2979                           postinc2	equ	0xFDE
  2980                           postdec2	equ	0xFDD
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _Delay1KTCYx *****************
  2986 ;; Defined at:
  2987 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  unit            1    wreg     unsigned char 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  unit            1    0[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;		None               void
  2994 ;; Registers used:
  2995 ;;		wreg
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3005 ;;Total ram usage:        1 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_lcd_init
  3011 ;;		_DelayPORXLCD
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text16
  3016  001E3C                     __ptext16:
  3017                           	opt stack 0
  3018  001E3C                     _Delay1KTCYx:
  3019                           	opt stack 28
  3020                           
  3021                           ;incstack = 0
  3022                           ;Delay1KTCYx@unit stored from wreg
  3023  001E3C  6E01               	movwf	Delay1KTCYx@unit,c
  3024  001E3E  0EFA               	movlw	250
  3025  001E40                     u1887:
  3026  001E40  F000               	nop	
  3027  001E42  2EE8               	decfsz	wreg,f,c
  3028  001E44  D7FD               	goto	u1887
  3029  001E46  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3030  001E48  D7FA               	goto	l1059
  3031  001E4A  0012               	return	
  3032  001E4C  0012               	return		;funcret
  3033  001E4E                     __end_of_Delay1KTCYx:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           indf0	equ	0xFEF
  3042                           postinc0	equ	0xFEE
  3043                           fsr0h	equ	0xFEA
  3044                           fsr0l	equ	0xFE9
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _lcd_comand *****************
  3056 ;; Defined at:
  3057 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  d               1    wreg     unsigned char 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  d               1    4[COMRAM] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;		None               void
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3075 ;;Total ram usage:        1 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    2
  3078 ;; This function calls:
  3079 ;;		_lcd_send_byte
  3080 ;; This function is called by:
  3081 ;;		_caratula
  3082 ;;		_Setup
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text17
  3087  001E72                     __ptext17:
  3088                           	opt stack 0
  3089  001E72                     _lcd_comand:
  3090                           	opt stack 27
  3091                           
  3092                           ;incstack = 0
  3093                           ;lcd_comand@d stored from wreg
  3094  001E72  6E05               	movwf	lcd_comand@d,c
  3095                           
  3096                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  3097  001E74  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  3098  001E78  0E00               	movlw	0
  3099  001E7A  ECAE  F00E         	call	_lcd_send_byte
  3100  001E7E  0012               	return		;funcret
  3101  001E80                     __end_of_lcd_comand:
  3102                           	opt stack 0
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           prodh	equ	0xFF4
  3108                           prodl	equ	0xFF3
  3109                           indf0	equ	0xFEF
  3110                           postinc0	equ	0xFEE
  3111                           fsr0h	equ	0xFEA
  3112                           fsr0l	equ	0xFE9
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           indf2	equ	0xFDF
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _lcd_send_byte *****************
  3124 ;; Defined at:
  3125 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  address         1    wreg     unsigned char 
  3128 ;;  n               1    2[COMRAM] unsigned char 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  address         1    3[COMRAM] unsigned char 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;		None               void
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3140 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3144 ;;Total ram usage:        2 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    1
  3147 ;; This function calls:
  3148 ;;		_Delay100TCYx
  3149 ;;		_lcd_send_nibble
  3150 ;; This function is called by:
  3151 ;;		_lcd_init
  3152 ;;		_lcd_gotoxy
  3153 ;;		_lcd_putc
  3154 ;;		_lcd_comand
  3155 ;;		_lcd_setcursor_vb
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text18
  3160  001D5C                     __ptext18:
  3161                           	opt stack 0
  3162  001D5C                     _lcd_send_byte:
  3163                           	opt stack 28
  3164                           
  3165                           ;incstack = 0
  3166                           ;lcd_send_byte@address stored from wreg
  3167  001D5C  6E04               	movwf	lcd_send_byte@address,c
  3168                           
  3169                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3170  001D5E  968A               	bcf	3978,3,c	;volatile
  3171                           
  3172                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3173  001D60  0E02               	movlw	2
  3174  001D62  EC27  F00F         	call	_Delay100TCYx
  3175                           
  3176                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3177  001D66  9893               	bcf	3987,4,c	;volatile
  3178                           
  3179                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3180  001D68  9A93               	bcf	3987,5,c	;volatile
  3181                           
  3182                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3183  001D6A  9C93               	bcf	3987,6,c	;volatile
  3184                           
  3185                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3186  001D6C  9E93               	bcf	3987,7,c	;volatile
  3187                           
  3188                           ;unmc_lcd_216.c: 101: if(address)
  3189  001D6E  5004               	movf	lcd_send_byte@address,w,c
  3190  001D70  B4D8               	btfsc	status,2,c
  3191  001D72  D002               	goto	l207
  3192                           
  3193                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3194  001D74  868A               	bsf	3978,3,c	;volatile
  3195  001D76  D001               	goto	l208
  3196  001D78                     l207:
  3197                           
  3198                           ;unmc_lcd_216.c: 103: else
  3199                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3200  001D78  968A               	bcf	3978,3,c	;volatile
  3201  001D7A                     l208:
  3202                           
  3203                           ;unmc_lcd_216.c: 106: __nop();
  3204  001D7A  F000               	nop	
  3205                           
  3206                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3207  001D7C  3803               	swapf	lcd_send_byte@n,w,c
  3208  001D7E  0B0F               	andlw	15
  3209  001D80  EC52  F00D         	call	_lcd_send_nibble
  3210                           
  3211                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3212  001D84  5003               	movf	lcd_send_byte@n,w,c
  3213  001D86  0B0F               	andlw	15
  3214  001D88  EC52  F00D         	call	_lcd_send_nibble
  3215  001D8C  0012               	return		;funcret
  3216  001D8E                     __end_of_lcd_send_byte:
  3217                           	opt stack 0
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           indf0	equ	0xFEF
  3225                           postinc0	equ	0xFEE
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           postdec1	equ	0xFE5
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _lcd_send_nibble *****************
  3239 ;; Defined at:
  3240 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  nibble          1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  nibble          1    1[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;		None               void
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_lcd_send_byte
  3264 ;;		_lcd_init
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text19
  3269  001AA4                     __ptext19:
  3270                           	opt stack 0
  3271  001AA4                     _lcd_send_nibble:
  3272                           	opt stack 28
  3273                           
  3274                           ;incstack = 0
  3275                           ;lcd_send_nibble@nibble stored from wreg
  3276  001AA4  6E02               	movwf	lcd_send_nibble@nibble,c
  3277                           
  3278                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3279  001AA6  A002               	btfss	lcd_send_nibble@nibble,0,c
  3280  001AA8  D003               	goto	u930
  3281  001AAA  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3282  001AAC  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3283  001AAE  D001               	goto	u948
  3284  001AB0                     u930:
  3285  001AB0  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3286  001AB2                     u948:
  3287  001AB2  3A01               	swapf	??_lcd_send_nibble,f,c
  3288  001AB4  508A               	movf	3978,w,c	;volatile
  3289  001AB6  1801               	xorwf	??_lcd_send_nibble,w,c
  3290  001AB8  0BEF               	andlw	-17
  3291  001ABA  1801               	xorwf	??_lcd_send_nibble,w,c
  3292  001ABC  6E8A               	movwf	3978,c	;volatile
  3293                           
  3294                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3295  001ABE  A202               	btfss	lcd_send_nibble@nibble,1,c
  3296  001AC0  D003               	goto	u950
  3297  001AC2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3298  001AC4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3299  001AC6  D001               	goto	u968
  3300  001AC8                     u950:
  3301  001AC8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3302  001ACA                     u968:
  3303  001ACA  3A01               	swapf	??_lcd_send_nibble,f,c
  3304  001ACC  4601               	rlncf	??_lcd_send_nibble,f,c
  3305  001ACE  508A               	movf	3978,w,c	;volatile
  3306  001AD0  1801               	xorwf	??_lcd_send_nibble,w,c
  3307  001AD2  0BDF               	andlw	-33
  3308  001AD4  1801               	xorwf	??_lcd_send_nibble,w,c
  3309  001AD6  6E8A               	movwf	3978,c	;volatile
  3310                           
  3311                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3312  001AD8  A402               	btfss	lcd_send_nibble@nibble,2,c
  3313  001ADA  D003               	goto	u970
  3314  001ADC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3315  001ADE  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3316  001AE0  D001               	goto	u988
  3317  001AE2                     u970:
  3318  001AE2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3319  001AE4                     u988:
  3320  001AE4  3A01               	swapf	??_lcd_send_nibble,f,c
  3321  001AE6  4601               	rlncf	??_lcd_send_nibble,f,c
  3322  001AE8  4601               	rlncf	??_lcd_send_nibble,f,c
  3323  001AEA  508A               	movf	3978,w,c	;volatile
  3324  001AEC  1801               	xorwf	??_lcd_send_nibble,w,c
  3325  001AEE  0BBF               	andlw	-65
  3326  001AF0  1801               	xorwf	??_lcd_send_nibble,w,c
  3327  001AF2  6E8A               	movwf	3978,c	;volatile
  3328                           
  3329                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3330  001AF4  A602               	btfss	lcd_send_nibble@nibble,3,c
  3331  001AF6  D003               	goto	u990
  3332  001AF8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3333  001AFA  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3334  001AFC  D001               	goto	u1008
  3335  001AFE                     u990:
  3336  001AFE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3337  001B00                     u1008:
  3338  001B00  3201               	rrcf	??_lcd_send_nibble,f,c
  3339  001B02  3201               	rrcf	??_lcd_send_nibble,f,c
  3340  001B04  508A               	movf	3978,w,c	;volatile
  3341  001B06  1801               	xorwf	??_lcd_send_nibble,w,c
  3342  001B08  0B7F               	andlw	-129
  3343  001B0A  1801               	xorwf	??_lcd_send_nibble,w,c
  3344  001B0C  6E8A               	movwf	3978,c	;volatile
  3345                           
  3346                           ;unmc_lcd_216.c: 32: __nop();
  3347  001B0E  F000               	nop	
  3348                           
  3349                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3350  001B10  848A               	bsf	3978,2,c	;volatile
  3351                           
  3352                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3353  001B12  F000               	nop	
  3354  001B14  F000               	nop	
  3355                           
  3356                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3357  001B16  948A               	bcf	3978,2,c	;volatile
  3358  001B18  0012               	return		;funcret
  3359  001B1A                     __end_of_lcd_send_nibble:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           indf0	equ	0xFEF
  3368                           postinc0	equ	0xFEE
  3369                           fsr0h	equ	0xFEA
  3370                           fsr0l	equ	0xFE9
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           postdec2	equ	0xFDD
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _Delay100TCYx *****************
  3382 ;; Defined at:
  3383 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  unit            1    wreg     unsigned char 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  unit            1    0[COMRAM] unsigned char 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;		None               void
  3390 ;; Registers used:
  3391 ;;		wreg
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3398 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3401 ;;Total ram usage:        1 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_lcd_send_byte
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text20
  3411  001E4E                     __ptext20:
  3412                           	opt stack 0
  3413  001E4E                     _Delay100TCYx:
  3414                           	opt stack 28
  3415                           
  3416                           ;incstack = 0
  3417                           ;Delay100TCYx@unit stored from wreg
  3418  001E4E  6E01               	movwf	Delay100TCYx@unit,c
  3419  001E50  0E21               	movlw	33
  3420  001E52                     u1897:
  3421  001E52  2EE8               	decfsz	wreg,f,c
  3422  001E54  D7FE               	goto	u1897
  3423  001E56  F000               	nop	
  3424  001E58  2E01               	decfsz	Delay100TCYx@unit,f,c
  3425  001E5A  D7FA               	goto	l1775
  3426  001E5C  0012               	return	
  3427  001E5E  0012               	return		;funcret
  3428  001E60                     __end_of_Delay100TCYx:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           indf0	equ	0xFEF
  3437                           postinc0	equ	0xFEE
  3438                           fsr0h	equ	0xFEA
  3439                           fsr0l	equ	0xFE9
  3440                           wreg	equ	0xFE8
  3441                           postdec1	equ	0xFE5
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           postinc2	equ	0xFDE
  3445                           postdec2	equ	0xFDD
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _Write_RTC *****************
  3451 ;; Defined at:
  3452 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;		None               void
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    2
  3473 ;; This function calls:
  3474 ;;		_RtccWrOn
  3475 ;;		_RtccWriteDate
  3476 ;;		_RtccWriteTime
  3477 ;;		___awdiv
  3478 ;; This function is called by:
  3479 ;;		_Setup
  3480 ;;		_setClock
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text21
  3485  0011A0                     __ptext21:
  3486                           	opt stack 0
  3487  0011A0                     _Write_RTC:
  3488                           	opt stack 27
  3489                           
  3490                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  3491                           
  3492                           ;incstack = 0
  3493  0011A0  EC30  F00F         	call	_RtccWrOn	;wreg free
  3494                           
  3495                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  3496  0011A4  80A3               	bsf	4003,0,c	;volatile
  3497                           
  3498                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  3499  0011A6  C037  F001         	movff	_segundo,___awdiv@dividend
  3500  0011AA  C038  F002         	movff	_segundo+1,___awdiv@dividend+1
  3501  0011AE  0E00               	movlw	0
  3502  0011B0  6E04               	movwf	___awdiv@divisor+1,c
  3503  0011B2  0E0A               	movlw	10
  3504  0011B4  6E03               	movwf	___awdiv@divisor,c
  3505  0011B6  EC3F  F00C         	call	___awdiv	;wreg free
  3506  0011BA  5001               	movf	?___awdiv,w,c
  3507  0011BC  6E4C               	movwf	_segundo_d,c
  3508                           
  3509                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  3510  0011BE  504C               	movf	_segundo_d,w,c
  3511  0011C0  0D0A               	mullw	10
  3512  0011C2  50F3               	movf	prodl,w,c
  3513  0011C4  0800               	sublw	0
  3514  0011C6  2437               	addwf	_segundo,w,c
  3515  0011C8  6E4D               	movwf	_segundo_u,c
  3516                           
  3517                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  3518  0011CA  504C               	movf	_segundo_d,w,c
  3519  0011CC  0D10               	mullw	16
  3520  0011CE  50F3               	movf	prodl,w,c
  3521  0011D0  244D               	addwf	_segundo_u,w,c
  3522  0011D2  6E3E               	movwf	_RtccTime+1,c
  3523                           
  3524                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  3525  0011D4  C058  F001         	movff	_minuto,___awdiv@dividend
  3526  0011D8  C059  F002         	movff	_minuto+1,___awdiv@dividend+1
  3527  0011DC  0E00               	movlw	0
  3528  0011DE  6E04               	movwf	___awdiv@divisor+1,c
  3529  0011E0  0E0A               	movlw	10
  3530  0011E2  6E03               	movwf	___awdiv@divisor,c
  3531  0011E4  EC3F  F00C         	call	___awdiv	;wreg free
  3532  0011E8  5001               	movf	?___awdiv,w,c
  3533  0011EA  6E4A               	movwf	_minuto_d,c
  3534                           
  3535                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  3536  0011EC  504A               	movf	_minuto_d,w,c
  3537  0011EE  0D0A               	mullw	10
  3538  0011F0  50F3               	movf	prodl,w,c
  3539  0011F2  0800               	sublw	0
  3540  0011F4  2458               	addwf	_minuto,w,c
  3541  0011F6  6E4B               	movwf	_minuto_u,c
  3542                           
  3543                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  3544  0011F8  504A               	movf	_minuto_d,w,c
  3545  0011FA  0D10               	mullw	16
  3546  0011FC  50F3               	movf	prodl,w,c
  3547  0011FE  244B               	addwf	_minuto_u,w,c
  3548  001200  6E3F               	movwf	_RtccTime+2,c
  3549                           
  3550                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  3551  001202  C054  F001         	movff	_hora,___awdiv@dividend
  3552  001206  C055  F002         	movff	_hora+1,___awdiv@dividend+1
  3553  00120A  0E00               	movlw	0
  3554  00120C  6E04               	movwf	___awdiv@divisor+1,c
  3555  00120E  0E0A               	movlw	10
  3556  001210  6E03               	movwf	___awdiv@divisor,c
  3557  001212  EC3F  F00C         	call	___awdiv	;wreg free
  3558  001216  5001               	movf	?___awdiv,w,c
  3559  001218  6E46               	movwf	_hora_d,c
  3560                           
  3561                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  3562  00121A  5046               	movf	_hora_d,w,c
  3563  00121C  0D0A               	mullw	10
  3564  00121E  50F3               	movf	prodl,w,c
  3565  001220  0800               	sublw	0
  3566  001222  2454               	addwf	_hora,w,c
  3567  001224  6E47               	movwf	_hora_u,c
  3568                           
  3569                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  3570  001226  5046               	movf	_hora_d,w,c
  3571  001228  0D10               	mullw	16
  3572  00122A  50F3               	movf	prodl,w,c
  3573  00122C  2447               	addwf	_hora_u,w,c
  3574  00122E  6E40               	movwf	_RtccTime+3,c
  3575                           
  3576                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  3577  001230  C04E  F001         	movff	_anio,___awdiv@dividend
  3578  001234  C04F  F002         	movff	_anio+1,___awdiv@dividend+1
  3579  001238  0E00               	movlw	0
  3580  00123A  6E04               	movwf	___awdiv@divisor+1,c
  3581  00123C  0E0A               	movlw	10
  3582  00123E  6E03               	movwf	___awdiv@divisor,c
  3583  001240  EC3F  F00C         	call	___awdiv	;wreg free
  3584  001244  5001               	movf	?___awdiv,w,c
  3585  001246  6E41               	movwf	_anio_d,c
  3586                           
  3587                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  3588  001248  5041               	movf	_anio_d,w,c
  3589  00124A  0D0A               	mullw	10
  3590  00124C  50F3               	movf	prodl,w,c
  3591  00124E  0800               	sublw	0
  3592  001250  244E               	addwf	_anio,w,c
  3593  001252  6E42               	movwf	_anio_u,c
  3594                           
  3595                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  3596  001254  5041               	movf	_anio_d,w,c
  3597  001256  0D10               	mullw	16
  3598  001258  50F3               	movf	prodl,w,c
  3599  00125A  2442               	addwf	_anio_u,w,c
  3600  00125C  6E3C               	movwf	_RtccDate+3,c
  3601                           
  3602                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  3603  00125E  C056  F001         	movff	_mes,___awdiv@dividend
  3604  001262  C057  F002         	movff	_mes+1,___awdiv@dividend+1
  3605  001266  0E00               	movlw	0
  3606  001268  6E04               	movwf	___awdiv@divisor+1,c
  3607  00126A  0E0A               	movlw	10
  3608  00126C  6E03               	movwf	___awdiv@divisor,c
  3609  00126E  EC3F  F00C         	call	___awdiv	;wreg free
  3610  001272  5001               	movf	?___awdiv,w,c
  3611  001274  6E48               	movwf	_mes_d,c
  3612                           
  3613                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  3614  001276  5048               	movf	_mes_d,w,c
  3615  001278  0D0A               	mullw	10
  3616  00127A  50F3               	movf	prodl,w,c
  3617  00127C  0800               	sublw	0
  3618  00127E  2456               	addwf	_mes,w,c
  3619  001280  6E49               	movwf	_mes_u,c
  3620                           
  3621                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  3622  001282  5048               	movf	_mes_d,w,c
  3623  001284  0D10               	mullw	16
  3624  001286  50F3               	movf	prodl,w,c
  3625  001288  2449               	addwf	_mes_u,w,c
  3626  00128A  6E3B               	movwf	_RtccDate+2,c
  3627                           
  3628                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  3629  00128C  C050  F001         	movff	_dia,___awdiv@dividend
  3630  001290  C051  F002         	movff	_dia+1,___awdiv@dividend+1
  3631  001294  0E00               	movlw	0
  3632  001296  6E04               	movwf	___awdiv@divisor+1,c
  3633  001298  0E0A               	movlw	10
  3634  00129A  6E03               	movwf	___awdiv@divisor,c
  3635  00129C  EC3F  F00C         	call	___awdiv	;wreg free
  3636  0012A0  5001               	movf	?___awdiv,w,c
  3637  0012A2  6E44               	movwf	_fecha_d,c
  3638                           
  3639                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  3640  0012A4  5044               	movf	_fecha_d,w,c
  3641  0012A6  0D0A               	mullw	10
  3642  0012A8  50F3               	movf	prodl,w,c
  3643  0012AA  0800               	sublw	0
  3644  0012AC  2450               	addwf	_dia,w,c
  3645  0012AE  6E45               	movwf	_fecha_u,c
  3646                           
  3647                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  3648  0012B0  5044               	movf	_fecha_d,w,c
  3649  0012B2  0D10               	mullw	16
  3650  0012B4  50F3               	movf	prodl,w,c
  3651  0012B6  2445               	addwf	_fecha_u,w,c
  3652  0012B8  6E3A               	movwf	_RtccDate+1,c
  3653                           
  3654                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  3655  0012BA  C052  F043         	movff	_diasem,_dia_semana
  3656                           
  3657                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  3658  0012BE  C052  F039         	movff	_diasem,_RtccDate
  3659                           
  3660                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  3661  0012C2  0E3D               	movlw	low _RtccTime
  3662  0012C4  6E01               	movwf	RtccWriteTime@pTm,c
  3663  0012C6  0E00               	movlw	high _RtccTime
  3664  0012C8  6E02               	movwf	RtccWriteTime@pTm+1,c
  3665  0012CA  0E01               	movlw	1
  3666  0012CC  6E03               	movwf	RtccWriteTime@di,c
  3667  0012CE  EC17  F00A         	call	_RtccWriteTime	;wreg free
  3668                           
  3669                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  3670  0012D2  0E39               	movlw	low _RtccDate
  3671  0012D4  6E01               	movwf	RtccWriteDate@pDt,c
  3672  0012D6  0E00               	movlw	high _RtccDate
  3673  0012D8  6E02               	movwf	RtccWriteDate@pDt+1,c
  3674  0012DA  0E01               	movlw	1
  3675  0012DC  6E03               	movwf	RtccWriteDate@di,c
  3676  0012DE  EC74  F009         	call	_RtccWriteDate	;wreg free
  3677                           
  3678                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  3679  0012E2  010F               	movlb	15	; () banked
  3680  0012E4  8F3F               	bsf	63,7,b	;volatile
  3681                           
  3682                           ; BSR set to: 15
  3683  0012E6  0012               	return		;funcret
  3684  0012E8                     __end_of_Write_RTC:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           indf0	equ	0xFEF
  3693                           postinc0	equ	0xFEE
  3694                           fsr0h	equ	0xFEA
  3695                           fsr0l	equ	0xFE9
  3696                           wreg	equ	0xFE8
  3697                           postdec1	equ	0xFE5
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function ___awdiv *****************
  3707 ;; Defined at:
  3708 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  dividend        2    0[COMRAM] int 
  3711 ;;  divisor         2    2[COMRAM] int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  quotient        2    6[COMRAM] int 
  3714 ;;  sign            1    5[COMRAM] unsigned char 
  3715 ;;  counter         1    4[COMRAM] unsigned char 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  2    0[COMRAM] int 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3726 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3728 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3729 ;;Total ram usage:        8 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_Write_RTC
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text22
  3739  00187E                     __ptext22:
  3740                           	opt stack 0
  3741  00187E                     ___awdiv:
  3742                           	opt stack 28
  3743                           
  3744                           ; BSR set to: 15
  3745                           ;incstack = 0
  3746  00187E  0E00               	movlw	0
  3747  001880  6E06               	movwf	___awdiv@sign,c
  3748  001882  AE04               	btfss	___awdiv@divisor+1,7,c
  3749  001884  D007               	goto	l1983
  3750  001886  6C03               	negf	___awdiv@divisor,c
  3751  001888  1E04               	comf	___awdiv@divisor+1,f,c
  3752  00188A  B0D8               	btfsc	status,0,c
  3753  00188C  2A04               	incf	___awdiv@divisor+1,f,c
  3754  00188E  0E01               	movlw	1
  3755  001890  6E06               	movwf	___awdiv@sign,c
  3756  001892  D000               	goto	l1983
  3757  001894                     l1983:
  3758  001894  AE02               	btfss	___awdiv@dividend+1,7,c
  3759  001896  D007               	goto	l1989
  3760  001898  6C01               	negf	___awdiv@dividend,c
  3761  00189A  1E02               	comf	___awdiv@dividend+1,f,c
  3762  00189C  B0D8               	btfsc	status,0,c
  3763  00189E  2A02               	incf	___awdiv@dividend+1,f,c
  3764  0018A0  0E01               	movlw	1
  3765  0018A2  1A06               	xorwf	___awdiv@sign,f,c
  3766  0018A4  D000               	goto	l1989
  3767  0018A6                     l1989:
  3768  0018A6  0E00               	movlw	0
  3769  0018A8  6E08               	movwf	___awdiv@quotient+1,c
  3770  0018AA  0E00               	movlw	0
  3771  0018AC  6E07               	movwf	___awdiv@quotient,c
  3772  0018AE  5003               	movf	___awdiv@divisor,w,c
  3773  0018B0  1004               	iorwf	___awdiv@divisor+1,w,c
  3774  0018B2  B4D8               	btfsc	status,2,c
  3775  0018B4  D021               	goto	l2011
  3776  0018B6  0E01               	movlw	1
  3777  0018B8  6E05               	movwf	___awdiv@counter,c
  3778  0018BA  D005               	goto	l1997
  3779  0018BC                     l1995:
  3780  0018BC  90D8               	bcf	status,0,c
  3781  0018BE  3603               	rlcf	___awdiv@divisor,f,c
  3782  0018C0  3604               	rlcf	___awdiv@divisor+1,f,c
  3783  0018C2  2A05               	incf	___awdiv@counter,f,c
  3784  0018C4  D000               	goto	l1997
  3785  0018C6                     l1997:
  3786  0018C6  BE04               	btfsc	___awdiv@divisor+1,7,c
  3787  0018C8  D002               	goto	l1999
  3788  0018CA  D7F8               	goto	l1995
  3789  0018CC  D000               	goto	l1999
  3790  0018CE                     l1999:
  3791  0018CE  90D8               	bcf	status,0,c
  3792  0018D0  3607               	rlcf	___awdiv@quotient,f,c
  3793  0018D2  3608               	rlcf	___awdiv@quotient+1,f,c
  3794  0018D4  5003               	movf	___awdiv@divisor,w,c
  3795  0018D6  5C01               	subwf	___awdiv@dividend,w,c
  3796  0018D8  5004               	movf	___awdiv@divisor+1,w,c
  3797  0018DA  5802               	subwfb	___awdiv@dividend+1,w,c
  3798  0018DC  A0D8               	btfss	status,0,c
  3799  0018DE  D006               	goto	l2007
  3800  0018E0  5003               	movf	___awdiv@divisor,w,c
  3801  0018E2  5E01               	subwf	___awdiv@dividend,f,c
  3802  0018E4  5004               	movf	___awdiv@divisor+1,w,c
  3803  0018E6  5A02               	subwfb	___awdiv@dividend+1,f,c
  3804  0018E8  8007               	bsf	___awdiv@quotient,0,c
  3805  0018EA  D000               	goto	l2007
  3806  0018EC                     l2007:
  3807  0018EC  90D8               	bcf	status,0,c
  3808  0018EE  3204               	rrcf	___awdiv@divisor+1,f,c
  3809  0018F0  3203               	rrcf	___awdiv@divisor,f,c
  3810  0018F2  2E05               	decfsz	___awdiv@counter,f,c
  3811  0018F4  D7EC               	goto	l1999
  3812  0018F6  D000               	goto	l2011
  3813  0018F8                     l2011:
  3814  0018F8  5006               	movf	___awdiv@sign,w,c
  3815  0018FA  B4D8               	btfsc	status,2,c
  3816  0018FC  D005               	goto	l2015
  3817  0018FE  6C07               	negf	___awdiv@quotient,c
  3818  001900  1E08               	comf	___awdiv@quotient+1,f,c
  3819  001902  B0D8               	btfsc	status,0,c
  3820  001904  2A08               	incf	___awdiv@quotient+1,f,c
  3821  001906  D000               	goto	l2015
  3822  001908                     l2015:
  3823  001908  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3824  00190C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3825  001910  0012               	return	
  3826  001912  0012               	return		;funcret
  3827  001914                     __end_of___awdiv:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           indf0	equ	0xFEF
  3836                           postinc0	equ	0xFEE
  3837                           fsr0h	equ	0xFEA
  3838                           fsr0l	equ	0xFE9
  3839                           wreg	equ	0xFE8
  3840                           postdec1	equ	0xFE5
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _RtccWriteTime *****************
  3850 ;; Defined at:
  3851 ;;		line 34 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  pTm             2    0[COMRAM] PTR const struct .
  3854 ;;		 -> RtccTime(4), 
  3855 ;;  di              1    2[COMRAM] enum E7121
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  tempHourWDay    2    9[COMRAM] struct .
  3858 ;;  tempMinSec      2    7[COMRAM] struct .
  3859 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3860 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3861 ;;  wasOn           1    4[COMRAM] enum E7121
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      enum E7337
  3864 ;; Registers used:
  3865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3871 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3872 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3874 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3875 ;;Total ram usage:       11 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    1
  3878 ;; This function calls:
  3879 ;;		_RtccWrOn
  3880 ;; This function is called by:
  3881 ;;		_Write_RTC
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text23
  3886  00142E                     __ptext23:
  3887                           	opt stack 0
  3888  00142E                     _RtccWriteTime:
  3889                           	opt stack 27
  3890                           
  3891                           ;incstack = 0
  3892  00142E  0E00               	movlw	0
  3893  001430  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3894  001432  EE20 F002          	lfsr	2,2
  3895  001436  5001               	movf	RtccWriteTime@pTm,w,c
  3896  001438  26D9               	addwf	fsr2l,f,c
  3897  00143A  5002               	movf	RtccWriteTime@pTm+1,w,c
  3898  00143C  22DA               	addwfc	fsr2h,f,c
  3899  00143E  0E5A               	movlw	90
  3900  001440  60DF               	cpfslt	indf2,c
  3901  001442  0012               	return	
  3902  001444  EE20 F001          	lfsr	2,1
  3903  001448  5001               	movf	RtccWriteTime@pTm,w,c
  3904  00144A  26D9               	addwf	fsr2l,f,c
  3905  00144C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3906  00144E  22DA               	addwfc	fsr2h,f,c
  3907  001450  0E5A               	movlw	90
  3908  001452  60DF               	cpfslt	indf2,c
  3909  001454  0012               	return	
  3910  001456  EE20 F003          	lfsr	2,3
  3911  00145A  5001               	movf	RtccWriteTime@pTm,w,c
  3912  00145C  26D9               	addwf	fsr2l,f,c
  3913  00145E  5002               	movf	RtccWriteTime@pTm+1,w,c
  3914  001460  22DA               	addwfc	fsr2h,f,c
  3915  001462  0E24               	movlw	36
  3916  001464  64DF               	cpfsgt	indf2,c
  3917  001466  D002               	goto	l1815
  3918  001468  0012               	return	
  3919                           
  3920                           ;	Return value of _RtccWriteTime is never used
  3921  00146A  0012               	return	
  3922  00146C                     l1815:
  3923  00146C  EE20 F002          	lfsr	2,2
  3924  001470  5001               	movf	RtccWriteTime@pTm,w,c
  3925  001472  26D9               	addwf	fsr2l,f,c
  3926  001474  5002               	movf	RtccWriteTime@pTm+1,w,c
  3927  001476  22DA               	addwfc	fsr2h,f,c
  3928  001478  50DF               	movf	indf2,w,c
  3929  00147A  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3930  00147C  EE20 F001          	lfsr	2,1
  3931  001480  5001               	movf	RtccWriteTime@pTm,w,c
  3932  001482  26D9               	addwf	fsr2l,f,c
  3933  001484  5002               	movf	RtccWriteTime@pTm+1,w,c
  3934  001486  22DA               	addwfc	fsr2h,f,c
  3935  001488  50DF               	movf	indf2,w,c
  3936  00148A  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3937  00148C  5003               	movf	RtccWriteTime@di,w,c
  3938  00148E  B4D8               	btfsc	status,2,c
  3939  001490  D002               	goto	l1821
  3940  001492  9CF2               	bcf	intcon,6,c	;volatile
  3941  001494  D000               	goto	l1821
  3942  001496                     l1821:
  3943  001496  0E00               	movlw	0
  3944  001498  BB3F               	btfsc	63,5,b	;volatile
  3945  00149A  0E01               	movlw	1
  3946  00149C  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3947  00149E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3948  0014A0  A4D8               	btfss	status,2,c
  3949  0014A2  D003               	goto	l1825
  3950  0014A4  EC30  F00F         	call	_RtccWrOn	;wreg free
  3951  0014A8  D000               	goto	l1825
  3952  0014AA                     l1825:
  3953  0014AA  0E00               	movlw	0
  3954  0014AC  BF3F               	btfsc	63,7,b	;volatile
  3955  0014AE  0E01               	movlw	1
  3956  0014B0  6E05               	movwf	RtccWriteTime@wasOn,c
  3957  0014B2  5005               	movf	RtccWriteTime@wasOn,w,c
  3958  0014B4  B4D8               	btfsc	status,2,c
  3959  0014B6  D007               	goto	l1831
  3960  0014B8  0E00               	movlw	0
  3961  0014BA  BE91               	btfsc	3985,7,c	;volatile
  3962  0014BC  0E01               	movlw	1
  3963  0014BE  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3964  0014C0  010F               	movlb	15	; () banked
  3965  0014C2  9F3F               	bcf	63,7,b	;volatile
  3966  0014C4  D000               	goto	l1831
  3967  0014C6                     l1831:
  3968  0014C6  0EFC               	movlw	252
  3969  0014C8  010F               	movlb	15	; () banked
  3970  0014CA  173F               	andwf	63,f,b	;volatile
  3971  0014CC  010F               	movlb	15	; () banked
  3972  0014CE  813F               	bsf	63,0,b	;volatile
  3973                           
  3974                           ; BSR set to: 15
  3975  0014D0  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3976                           
  3977                           ; BSR set to: 15
  3978  0014D4  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3979                           
  3980                           ; BSR set to: 15
  3981  0014D8  EE20 F003          	lfsr	2,3
  3982  0014DC  5001               	movf	RtccWriteTime@pTm,w,c
  3983  0014DE  26D9               	addwf	fsr2l,f,c
  3984  0014E0  5002               	movf	RtccWriteTime@pTm+1,w,c
  3985  0014E2  22DA               	addwfc	fsr2h,f,c
  3986  0014E4  50DF               	movf	indf2,w,c
  3987  0014E6  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3988                           
  3989                           ; BSR set to: 15
  3990  0014E8  0EFC               	movlw	252
  3991  0014EA  010F               	movlb	15	; () banked
  3992  0014EC  173F               	andwf	63,f,b	;volatile
  3993                           
  3994                           ; BSR set to: 15
  3995  0014EE  010F               	movlb	15	; () banked
  3996  0014F0  813F               	bsf	63,0,b	;volatile
  3997                           
  3998                           ; BSR set to: 15
  3999  0014F2  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  4000                           
  4001                           ; BSR set to: 15
  4002  0014F6  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  4003                           
  4004                           ; BSR set to: 15
  4005  0014FA  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  4006                           
  4007                           ; BSR set to: 15
  4008  0014FE  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  4009                           
  4010                           ; BSR set to: 15
  4011  001502  5005               	movf	RtccWriteTime@wasOn,w,c
  4012  001504  B4D8               	btfsc	status,2,c
  4013  001506  D00D               	goto	l1863
  4014                           
  4015                           ; BSR set to: 15
  4016  001508  010F               	movlb	15	; () banked
  4017  00150A  8F3F               	bsf	63,7,b	;volatile
  4018                           
  4019                           ; BSR set to: 15
  4020  00150C  5006               	movf	RtccWriteTime@wasAlrm,w,c
  4021  00150E  B4D8               	btfsc	status,2,c
  4022  001510  D002               	goto	l1859
  4023                           
  4024                           ; BSR set to: 15
  4025  001512  8E91               	bsf	3985,7,c	;volatile
  4026  001514  D000               	goto	l1859
  4027  001516                     l1859:
  4028                           
  4029                           ; BSR set to: 15
  4030  001516  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4031  001518  B4D8               	btfsc	status,2,c
  4032  00151A  D009               	goto	l1867
  4033                           
  4034                           ; BSR set to: 15
  4035  00151C  EC30  F00F         	call	_RtccWrOn	;wreg free
  4036  001520  D006               	goto	l1867
  4037  001522                     l1863:
  4038  001522  5007               	movf	RtccWriteTime@wasWrEn,w,c
  4039  001524  A4D8               	btfss	status,2,c
  4040  001526  D003               	goto	l1867
  4041  001528  010F               	movlb	15	; () banked
  4042  00152A  9B3F               	bcf	63,5,b	;volatile
  4043                           
  4044                           ; BSR set to: 15
  4045  00152C  D000               	goto	l1867
  4046  00152E                     l1867:
  4047  00152E  5003               	movf	RtccWriteTime@di,w,c
  4048  001530  B4D8               	btfsc	status,2,c
  4049  001532  0012               	return	
  4050  001534  8CF2               	bsf	intcon,6,c	;volatile
  4051  001536  0012               	return	
  4052                           
  4053                           ;	Return value of _RtccWriteTime is never used
  4054  001538  0012               	return		;funcret
  4055  00153A                     __end_of_RtccWriteTime:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           indf0	equ	0xFEF
  4065                           postinc0	equ	0xFEE
  4066                           fsr0h	equ	0xFEA
  4067                           fsr0l	equ	0xFE9
  4068                           wreg	equ	0xFE8
  4069                           postdec1	equ	0xFE5
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function _RtccWriteDate *****************
  4079 ;; Defined at:
  4080 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;  pDt             2    0[COMRAM] PTR const struct .
  4083 ;;		 -> RtccDate(4), 
  4084 ;;  di              1    2[COMRAM] enum E7121
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  tempHourWDay    2   11[COMRAM] struct .
  4087 ;;  tempDayMonth    2    9[COMRAM] struct .
  4088 ;;  tempYear        2    6[COMRAM] struct .
  4089 ;;  wasWrEn         1    8[COMRAM] enum E7121
  4090 ;;  wasAlrm         1    5[COMRAM] enum E7121
  4091 ;;  wasOn           1    4[COMRAM] enum E7121
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      enum E7337
  4094 ;; Registers used:
  4095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4101 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4102 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4104 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4105 ;;Total ram usage:       13 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    1
  4108 ;; This function calls:
  4109 ;;		_RtccWrOn
  4110 ;; This function is called by:
  4111 ;;		_Write_RTC
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text24
  4116  0012E8                     __ptext24:
  4117                           	opt stack 0
  4118  0012E8                     _RtccWriteDate:
  4119                           	opt stack 27
  4120                           
  4121                           ;incstack = 0
  4122  0012E8  0E00               	movlw	0
  4123  0012EA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4124  0012EC  EE20 F002          	lfsr	2,2
  4125  0012F0  5001               	movf	RtccWriteDate@pDt,w,c
  4126  0012F2  26D9               	addwf	fsr2l,f,c
  4127  0012F4  5002               	movf	RtccWriteDate@pDt+1,w,c
  4128  0012F6  22DA               	addwfc	fsr2h,f,c
  4129  0012F8  0E13               	movlw	19
  4130  0012FA  60DF               	cpfslt	indf2,c
  4131  0012FC  0012               	return	
  4132  0012FE  EE20 F002          	lfsr	2,2
  4133  001302  5001               	movf	RtccWriteDate@pDt,w,c
  4134  001304  26D9               	addwf	fsr2l,f,c
  4135  001306  5002               	movf	RtccWriteDate@pDt+1,w,c
  4136  001308  22DA               	addwfc	fsr2h,f,c
  4137  00130A  50DF               	movf	indf2,w,c
  4138  00130C  B4D8               	btfsc	status,2,c
  4139  00130E  0012               	return	
  4140  001310  EE20 F001          	lfsr	2,1
  4141  001314  5001               	movf	RtccWriteDate@pDt,w,c
  4142  001316  26D9               	addwf	fsr2l,f,c
  4143  001318  5002               	movf	RtccWriteDate@pDt+1,w,c
  4144  00131A  22DA               	addwfc	fsr2h,f,c
  4145  00131C  0E32               	movlw	50
  4146  00131E  60DF               	cpfslt	indf2,c
  4147  001320  0012               	return	
  4148  001322  EE20 F001          	lfsr	2,1
  4149  001326  5001               	movf	RtccWriteDate@pDt,w,c
  4150  001328  26D9               	addwf	fsr2l,f,c
  4151  00132A  5002               	movf	RtccWriteDate@pDt+1,w,c
  4152  00132C  22DA               	addwfc	fsr2h,f,c
  4153  00132E  50DF               	movf	indf2,w,c
  4154  001330  B4D8               	btfsc	status,2,c
  4155  001332  0012               	return	
  4156  001334  EE20 F003          	lfsr	2,3
  4157  001338  5001               	movf	RtccWriteDate@pDt,w,c
  4158  00133A  26D9               	addwf	fsr2l,f,c
  4159  00133C  5002               	movf	RtccWriteDate@pDt+1,w,c
  4160  00133E  22DA               	addwfc	fsr2h,f,c
  4161  001340  0E99               	movlw	153
  4162  001342  64DF               	cpfsgt	indf2,c
  4163  001344  D002               	goto	l1883
  4164  001346  0012               	return	
  4165                           
  4166                           ;	Return value of _RtccWriteDate is never used
  4167  001348  0012               	return	
  4168  00134A                     l1883:
  4169  00134A  EE20 F003          	lfsr	2,3
  4170  00134E  5001               	movf	RtccWriteDate@pDt,w,c
  4171  001350  26D9               	addwf	fsr2l,f,c
  4172  001352  5002               	movf	RtccWriteDate@pDt+1,w,c
  4173  001354  22DA               	addwfc	fsr2h,f,c
  4174  001356  50DF               	movf	indf2,w,c
  4175  001358  6E07               	movwf	RtccWriteDate@tempYear,c
  4176  00135A  EE20 F001          	lfsr	2,1
  4177  00135E  5001               	movf	RtccWriteDate@pDt,w,c
  4178  001360  26D9               	addwf	fsr2l,f,c
  4179  001362  5002               	movf	RtccWriteDate@pDt+1,w,c
  4180  001364  22DA               	addwfc	fsr2h,f,c
  4181  001366  50DF               	movf	indf2,w,c
  4182  001368  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4183  00136A  EE20 F002          	lfsr	2,2
  4184  00136E  5001               	movf	RtccWriteDate@pDt,w,c
  4185  001370  26D9               	addwf	fsr2l,f,c
  4186  001372  5002               	movf	RtccWriteDate@pDt+1,w,c
  4187  001374  22DA               	addwfc	fsr2h,f,c
  4188  001376  50DF               	movf	indf2,w,c
  4189  001378  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4190  00137A  5003               	movf	RtccWriteDate@di,w,c
  4191  00137C  B4D8               	btfsc	status,2,c
  4192  00137E  D002               	goto	l1889
  4193  001380  9CF2               	bcf	intcon,6,c	;volatile
  4194  001382  D000               	goto	l1889
  4195  001384                     l1889:
  4196  001384  0E00               	movlw	0
  4197  001386  BB3F               	btfsc	63,5,b	;volatile
  4198  001388  0E01               	movlw	1
  4199  00138A  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4200  00138C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4201  00138E  A4D8               	btfss	status,2,c
  4202  001390  D003               	goto	l1893
  4203  001392  EC30  F00F         	call	_RtccWrOn	;wreg free
  4204  001396  D000               	goto	l1893
  4205  001398                     l1893:
  4206  001398  0E00               	movlw	0
  4207  00139A  BF3F               	btfsc	63,7,b	;volatile
  4208  00139C  0E01               	movlw	1
  4209  00139E  6E05               	movwf	RtccWriteDate@wasOn,c
  4210  0013A0  5005               	movf	RtccWriteDate@wasOn,w,c
  4211  0013A2  B4D8               	btfsc	status,2,c
  4212  0013A4  D007               	goto	l1899
  4213  0013A6  0E00               	movlw	0
  4214  0013A8  BE91               	btfsc	3985,7,c	;volatile
  4215  0013AA  0E01               	movlw	1
  4216  0013AC  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4217  0013AE  010F               	movlb	15	; () banked
  4218  0013B0  9F3F               	bcf	63,7,b	;volatile
  4219  0013B2  D000               	goto	l1899
  4220  0013B4                     l1899:
  4221  0013B4  0EFC               	movlw	252
  4222  0013B6  010F               	movlb	15	; () banked
  4223  0013B8  173F               	andwf	63,f,b	;volatile
  4224  0013BA  010F               	movlb	15	; () banked
  4225  0013BC  813F               	bsf	63,0,b	;volatile
  4226                           
  4227                           ; BSR set to: 15
  4228  0013BE  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4229                           
  4230                           ; BSR set to: 15
  4231  0013C2  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4232                           
  4233                           ; BSR set to: 15
  4234  0013C6  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4235  0013CA  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4236  0013CE  50DF               	movf	indf2,w,c
  4237  0013D0  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4238                           
  4239                           ; BSR set to: 15
  4240  0013D2  0EFC               	movlw	252
  4241  0013D4  010F               	movlb	15	; () banked
  4242  0013D6  173F               	andwf	63,f,b	;volatile
  4243                           
  4244                           ; BSR set to: 15
  4245  0013D8  0E03               	movlw	3
  4246  0013DA  010F               	movlb	15	; () banked
  4247  0013DC  133F               	iorwf	63,f,b	;volatile
  4248                           
  4249                           ; BSR set to: 15
  4250  0013DE  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4251                           
  4252                           ; BSR set to: 15
  4253  0013E2  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4254                           
  4255                           ; BSR set to: 15
  4256  0013E6  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4257                           
  4258                           ; BSR set to: 15
  4259  0013EA  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4260                           
  4261                           ; BSR set to: 15
  4262  0013EE  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4263                           
  4264                           ; BSR set to: 15
  4265  0013F2  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4266                           
  4267                           ; BSR set to: 15
  4268  0013F6  5005               	movf	RtccWriteDate@wasOn,w,c
  4269  0013F8  B4D8               	btfsc	status,2,c
  4270  0013FA  D00D               	goto	l1935
  4271                           
  4272                           ; BSR set to: 15
  4273  0013FC  010F               	movlb	15	; () banked
  4274  0013FE  8F3F               	bsf	63,7,b	;volatile
  4275                           
  4276                           ; BSR set to: 15
  4277  001400  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4278  001402  B4D8               	btfsc	status,2,c
  4279  001404  D002               	goto	l1931
  4280                           
  4281                           ; BSR set to: 15
  4282  001406  8E91               	bsf	3985,7,c	;volatile
  4283  001408  D000               	goto	l1931
  4284  00140A                     l1931:
  4285                           
  4286                           ; BSR set to: 15
  4287  00140A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4288  00140C  B4D8               	btfsc	status,2,c
  4289  00140E  D009               	goto	l1939
  4290                           
  4291                           ; BSR set to: 15
  4292  001410  EC30  F00F         	call	_RtccWrOn	;wreg free
  4293  001414  D006               	goto	l1939
  4294  001416                     l1935:
  4295  001416  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4296  001418  A4D8               	btfss	status,2,c
  4297  00141A  D003               	goto	l1939
  4298  00141C  010F               	movlb	15	; () banked
  4299  00141E  9B3F               	bcf	63,5,b	;volatile
  4300                           
  4301                           ; BSR set to: 15
  4302  001420  D000               	goto	l1939
  4303  001422                     l1939:
  4304  001422  5003               	movf	RtccWriteDate@di,w,c
  4305  001424  B4D8               	btfsc	status,2,c
  4306  001426  0012               	return	
  4307  001428  9CF2               	bcf	intcon,6,c	;volatile
  4308  00142A  0012               	return	
  4309                           
  4310                           ;	Return value of _RtccWriteDate is never used
  4311  00142C  0012               	return		;funcret
  4312  00142E                     __end_of_RtccWriteDate:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           indf0	equ	0xFEF
  4322                           postinc0	equ	0xFEE
  4323                           fsr0h	equ	0xFEA
  4324                           fsr0l	equ	0xFE9
  4325                           wreg	equ	0xFE8
  4326                           postdec1	equ	0xFE5
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _RtccWrOn *****************
  4336 ;; Defined at:
  4337 ;;		line 21 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  data            2    0        unsigned int 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_Write_RTC
  4361 ;;		_RtccWriteDate
  4362 ;;		_RtccWriteTime
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text25
  4367  001E60                     __ptext25:
  4368                           	opt stack 0
  4369  001E60                     _RtccWrOn:
  4370                           	opt stack 27
  4371                           
  4372                           ;incstack = 0
  4373  001E60  9CF2               	bcf	intcon,6,c	;volatile
  4374  001E62  0E55               	movlw	85
  4375  001E64  6EA7               	movwf	4007,c	;volatile
  4376  001E66  0EAA               	movlw	170
  4377  001E68  6EA7               	movwf	4007,c	;volatile
  4378  001E6A  010F               	movlb	15	; () banked
  4379  001E6C  8B3F               	bsf	63,5,b	;volatile
  4380                           
  4381                           ; BSR set to: 15
  4382  001E6E  8CF2               	bsf	intcon,6,c	;volatile
  4383                           
  4384                           ; BSR set to: 15
  4385  001E70  0012               	return		;funcret
  4386  001E72                     __end_of_RtccWrOn:
  4387                           	opt stack 0
  4388                           tblptru	equ	0xFF8
  4389                           tblptrh	equ	0xFF7
  4390                           tblptrl	equ	0xFF6
  4391                           tablat	equ	0xFF5
  4392                           prodh	equ	0xFF4
  4393                           prodl	equ	0xFF3
  4394                           intcon	equ	0xFF2
  4395                           indf0	equ	0xFEF
  4396                           postinc0	equ	0xFEE
  4397                           fsr0h	equ	0xFEA
  4398                           fsr0l	equ	0xFE9
  4399                           wreg	equ	0xFE8
  4400                           postdec1	equ	0xFE5
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _Read_RTC *****************
  4410 ;; Defined at:
  4411 ;;		line 111 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;		None               void
  4418 ;; Registers used:
  4419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4429 ;;Total ram usage:        0 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    1
  4432 ;; This function calls:
  4433 ;;		_RtccReadDate
  4434 ;;		_RtccReadTime
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text26
  4441  001644                     __ptext26:
  4442                           	opt stack 0
  4443  001644                     _Read_RTC:
  4444                           	opt stack 29
  4445                           
  4446                           ;headers\unmc_rtcc_01.h: 114: RtccReadTime(&RtccTime);
  4447                           
  4448                           ; BSR set to: 15
  4449                           ;incstack = 0
  4450  001644  0E3D               	movlw	low _RtccTime
  4451  001646  6E01               	movwf	RtccReadTime@pTm,c
  4452  001648  0E00               	movlw	high _RtccTime
  4453  00164A  6E02               	movwf	RtccReadTime@pTm+1,c
  4454  00164C  EC8D  F00D         	call	_RtccReadTime	;wreg free
  4455                           
  4456                           ;headers\unmc_rtcc_01.h: 115: segundo_u=(RtccTime.f.sec & 0x0F);
  4457  001650  503E               	movf	_RtccTime+1,w,c
  4458  001652  0B0F               	andlw	15
  4459  001654  6E4D               	movwf	_segundo_u,c
  4460                           
  4461                           ;headers\unmc_rtcc_01.h: 116: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  4462  001656  383E               	swapf	_RtccTime+1,w,c
  4463  001658  0B0F               	andlw	15
  4464  00165A  0B0F               	andlw	15
  4465  00165C  6E4C               	movwf	_segundo_d,c
  4466                           
  4467                           ;headers\unmc_rtcc_01.h: 117: minuto_u=(RtccTime.f.min & 0x0F);
  4468  00165E  503F               	movf	_RtccTime+2,w,c
  4469  001660  0B0F               	andlw	15
  4470  001662  6E4B               	movwf	_minuto_u,c
  4471                           
  4472                           ;headers\unmc_rtcc_01.h: 118: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  4473  001664  383F               	swapf	_RtccTime+2,w,c
  4474  001666  0B0F               	andlw	15
  4475  001668  0B0F               	andlw	15
  4476  00166A  6E4A               	movwf	_minuto_d,c
  4477                           
  4478                           ;headers\unmc_rtcc_01.h: 119: hora_u=(RtccTime.f.hour & 0x0F);
  4479  00166C  5040               	movf	_RtccTime+3,w,c
  4480  00166E  0B0F               	andlw	15
  4481  001670  6E47               	movwf	_hora_u,c
  4482                           
  4483                           ;headers\unmc_rtcc_01.h: 120: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  4484  001672  3840               	swapf	_RtccTime+3,w,c
  4485  001674  0B0F               	andlw	15
  4486  001676  0B0F               	andlw	15
  4487  001678  6E46               	movwf	_hora_d,c
  4488                           
  4489                           ;headers\unmc_rtcc_01.h: 121: RtccReadDate(&RtccDate);
  4490  00167A  0E39               	movlw	low _RtccDate
  4491  00167C  6E01               	movwf	RtccReadDate@pDt,c
  4492  00167E  0E00               	movlw	high _RtccDate
  4493  001680  6E02               	movwf	RtccReadDate@pDt+1,c
  4494  001682  EC8A  F00C         	call	_RtccReadDate	;wreg free
  4495                           
  4496                           ;headers\unmc_rtcc_01.h: 122: fecha_u=(RtccDate.f.mday & 0x0F);
  4497  001686  503A               	movf	_RtccDate+1,w,c
  4498  001688  0B0F               	andlw	15
  4499  00168A  6E45               	movwf	_fecha_u,c
  4500                           
  4501                           ;headers\unmc_rtcc_01.h: 123: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  4502  00168C  383A               	swapf	_RtccDate+1,w,c
  4503  00168E  0B0F               	andlw	15
  4504  001690  0B0F               	andlw	15
  4505  001692  6E44               	movwf	_fecha_d,c
  4506                           
  4507                           ;headers\unmc_rtcc_01.h: 124: mes_u=(RtccDate.f.mon & 0x0F);
  4508  001694  503B               	movf	_RtccDate+2,w,c
  4509  001696  0B0F               	andlw	15
  4510  001698  6E49               	movwf	_mes_u,c
  4511                           
  4512                           ;headers\unmc_rtcc_01.h: 125: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  4513  00169A  383B               	swapf	_RtccDate+2,w,c
  4514  00169C  0B0F               	andlw	15
  4515  00169E  0B0F               	andlw	15
  4516  0016A0  6E48               	movwf	_mes_d,c
  4517                           
  4518                           ;headers\unmc_rtcc_01.h: 126: dia_semana=RtccDate.f.wday;
  4519  0016A2  C039  F043         	movff	_RtccDate,_dia_semana
  4520                           
  4521                           ;headers\unmc_rtcc_01.h: 127: anio_u=(RtccDate.f.year & 0x0F);
  4522  0016A6  503C               	movf	_RtccDate+3,w,c
  4523  0016A8  0B0F               	andlw	15
  4524  0016AA  6E42               	movwf	_anio_u,c
  4525                           
  4526                           ;headers\unmc_rtcc_01.h: 128: anio_d=((RtccDate.f.year & 0xF0)>>4);
  4527  0016AC  383C               	swapf	_RtccDate+3,w,c
  4528  0016AE  0B0F               	andlw	15
  4529  0016B0  0B0F               	andlw	15
  4530  0016B2  6E41               	movwf	_anio_d,c
  4531                           
  4532                           ;headers\unmc_rtcc_01.h: 130: segundo=segundo_d*10+segundo_u;
  4533  0016B4  504C               	movf	_segundo_d,w,c
  4534  0016B6  0D0A               	mullw	10
  4535  0016B8  504D               	movf	_segundo_u,w,c
  4536  0016BA  24F3               	addwf	prodl,w,c
  4537  0016BC  6E37               	movwf	_segundo,c
  4538  0016BE  0E00               	movlw	0
  4539  0016C0  20F4               	addwfc	prodh,w,c
  4540  0016C2  6E38               	movwf	_segundo+1,c
  4541                           
  4542                           ;headers\unmc_rtcc_01.h: 131: minuto=minuto_d*10+minuto_u;
  4543  0016C4  504A               	movf	_minuto_d,w,c
  4544  0016C6  0D0A               	mullw	10
  4545  0016C8  504B               	movf	_minuto_u,w,c
  4546  0016CA  24F3               	addwf	prodl,w,c
  4547  0016CC  6E58               	movwf	_minuto,c
  4548  0016CE  0E00               	movlw	0
  4549  0016D0  20F4               	addwfc	prodh,w,c
  4550  0016D2  6E59               	movwf	_minuto+1,c
  4551                           
  4552                           ;headers\unmc_rtcc_01.h: 132: hora=hora_d*10+hora_u;
  4553  0016D4  5046               	movf	_hora_d,w,c
  4554  0016D6  0D0A               	mullw	10
  4555  0016D8  5047               	movf	_hora_u,w,c
  4556  0016DA  24F3               	addwf	prodl,w,c
  4557  0016DC  6E54               	movwf	_hora,c
  4558  0016DE  0E00               	movlw	0
  4559  0016E0  20F4               	addwfc	prodh,w,c
  4560  0016E2  6E55               	movwf	_hora+1,c
  4561                           
  4562                           ;headers\unmc_rtcc_01.h: 133: dia=fecha_d*10+fecha_u;
  4563  0016E4  5044               	movf	_fecha_d,w,c
  4564  0016E6  0D0A               	mullw	10
  4565  0016E8  5045               	movf	_fecha_u,w,c
  4566  0016EA  24F3               	addwf	prodl,w,c
  4567  0016EC  6E50               	movwf	_dia,c
  4568  0016EE  0E00               	movlw	0
  4569  0016F0  20F4               	addwfc	prodh,w,c
  4570  0016F2  6E51               	movwf	_dia+1,c
  4571                           
  4572                           ;headers\unmc_rtcc_01.h: 134: diasem=dia_semana;
  4573  0016F4  C043  F052         	movff	_dia_semana,_diasem
  4574  0016F8  6A53               	clrf	_diasem+1,c
  4575                           
  4576                           ;headers\unmc_rtcc_01.h: 135: mes=mes_d*10+mes_u;
  4577  0016FA  5048               	movf	_mes_d,w,c
  4578  0016FC  0D0A               	mullw	10
  4579  0016FE  5049               	movf	_mes_u,w,c
  4580  001700  24F3               	addwf	prodl,w,c
  4581  001702  6E56               	movwf	_mes,c
  4582  001704  0E00               	movlw	0
  4583  001706  20F4               	addwfc	prodh,w,c
  4584  001708  6E57               	movwf	_mes+1,c
  4585                           
  4586                           ;headers\unmc_rtcc_01.h: 136: anio=anio_d*10+anio_u;
  4587  00170A  5041               	movf	_anio_d,w,c
  4588  00170C  0D0A               	mullw	10
  4589  00170E  5042               	movf	_anio_u,w,c
  4590  001710  24F3               	addwf	prodl,w,c
  4591  001712  6E4E               	movwf	_anio,c
  4592  001714  0E00               	movlw	0
  4593  001716  20F4               	addwfc	prodh,w,c
  4594  001718  6E4F               	movwf	_anio+1,c
  4595  00171A  0012               	return		;funcret
  4596  00171C                     __end_of_Read_RTC:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           indf0	equ	0xFEF
  4606                           postinc0	equ	0xFEE
  4607                           fsr0h	equ	0xFEA
  4608                           fsr0l	equ	0xFE9
  4609                           wreg	equ	0xFE8
  4610                           postdec1	equ	0xFE5
  4611                           fsr1l	equ	0xFE1
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           postdec2	equ	0xFDD
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _RtccReadTime *****************
  4620 ;; Defined at:
  4621 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  pTm             2    0[COMRAM] PTR struct .
  4624 ;;		 -> RtccTime(4), 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  rTD0            8   10[COMRAM] struct .
  4627 ;;  rTD1            8    2[COMRAM] struct .
  4628 ;; Return value:  Size  Location     Type
  4629 ;;		None               void
  4630 ;; Registers used:
  4631 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4638 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4640 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4641 ;;Total ram usage:       18 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_Read_RTC
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text27
  4651  001B1A                     __ptext27:
  4652                           	opt stack 0
  4653  001B1A                     _RtccReadTime:
  4654                           	opt stack 29
  4655  001B1A  0EFC               	movlw	252
  4656  001B1C  010F               	movlb	15	; () banked
  4657  001B1E  173F               	andwf	63,f,b	;volatile
  4658                           
  4659                           ; BSR set to: 15
  4660  001B20  010F               	movlb	15	; () banked
  4661  001B22  813F               	bsf	63,0,b	;volatile
  4662                           
  4663                           ; BSR set to: 15
  4664  001B24  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  4665                           
  4666                           ; BSR set to: 15
  4667  001B28  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  4668                           
  4669                           ; BSR set to: 15
  4670  001B2C  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  4671                           
  4672                           ; BSR set to: 15
  4673  001B30  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  4674                           
  4675                           ; BSR set to: 15
  4676  001B34  0EFC               	movlw	252
  4677  001B36  010F               	movlb	15	; () banked
  4678  001B38  173F               	andwf	63,f,b	;volatile
  4679  001B3A  010F               	movlb	15	; () banked
  4680  001B3C  813F               	bsf	63,0,b	;volatile
  4681                           
  4682                           ; BSR set to: 15
  4683  001B3E  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  4684                           
  4685                           ; BSR set to: 15
  4686  001B42  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  4687                           
  4688                           ; BSR set to: 15
  4689  001B46  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  4690                           
  4691                           ; BSR set to: 15
  4692  001B4A  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  4693                           
  4694                           ; BSR set to: 15
  4695  001B4E  5009               	movf	RtccReadTime@rTD1+6,w,c
  4696  001B50  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  4697  001B52  A4D8               	btfss	status,2,c
  4698  001B54  D7E2               	goto	l2107
  4699                           
  4700                           ; BSR set to: 15
  4701                           
  4702                           ; BSR set to: 15
  4703  001B56  EE20 F003          	lfsr	2,3
  4704  001B5A  5001               	movf	RtccReadTime@pTm,w,c
  4705  001B5C  26D9               	addwf	fsr2l,f,c
  4706  001B5E  5002               	movf	RtccReadTime@pTm+1,w,c
  4707  001B60  22DA               	addwfc	fsr2h,f,c
  4708  001B62  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  4709  001B66  EE20 F002          	lfsr	2,2
  4710  001B6A  5001               	movf	RtccReadTime@pTm,w,c
  4711  001B6C  26D9               	addwf	fsr2l,f,c
  4712  001B6E  5002               	movf	RtccReadTime@pTm+1,w,c
  4713  001B70  22DA               	addwfc	fsr2h,f,c
  4714  001B72  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  4715  001B76  EE20 F001          	lfsr	2,1
  4716  001B7A  5001               	movf	RtccReadTime@pTm,w,c
  4717  001B7C  26D9               	addwf	fsr2l,f,c
  4718  001B7E  5002               	movf	RtccReadTime@pTm+1,w,c
  4719  001B80  22DA               	addwfc	fsr2h,f,c
  4720  001B82  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  4721                           
  4722                           ; BSR set to: 15
  4723  001B86  0012               	return		;funcret
  4724  001B88                     __end_of_RtccReadTime:
  4725                           	opt stack 0
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           indf0	equ	0xFEF
  4734                           postinc0	equ	0xFEE
  4735                           fsr0h	equ	0xFEA
  4736                           fsr0l	equ	0xFE9
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           fsr1l	equ	0xFE1
  4740                           indf2	equ	0xFDF
  4741                           postinc2	equ	0xFDE
  4742                           postdec2	equ	0xFDD
  4743                           fsr2h	equ	0xFDA
  4744                           fsr2l	equ	0xFD9
  4745                           status	equ	0xFD8
  4746                           
  4747 ;; *************** function _RtccReadDate *****************
  4748 ;; Defined at:
  4749 ;;		line 23 in file "C:\Program Files\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  pDt             2    0[COMRAM] PTR struct .
  4752 ;;		 -> RtccDate(4), 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;  rTD0            8   10[COMRAM] struct .
  4755 ;;  rTD1            8    2[COMRAM] struct .
  4756 ;; Return value:  Size  Location     Type
  4757 ;;		None               void
  4758 ;; Registers used:
  4759 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4766 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;Total ram usage:       18 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_Read_RTC
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text28
  4779  001914                     __ptext28:
  4780                           	opt stack 0
  4781  001914                     _RtccReadDate:
  4782                           	opt stack 29
  4783  001914  0EFC               	movlw	252
  4784  001916  010F               	movlb	15	; () banked
  4785  001918  173F               	andwf	63,f,b	;volatile
  4786  00191A  0E03               	movlw	3
  4787  00191C  010F               	movlb	15	; () banked
  4788  00191E  133F               	iorwf	63,f,b	;volatile
  4789                           
  4790                           ; BSR set to: 15
  4791  001920  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  4792                           
  4793                           ; BSR set to: 15
  4794  001924  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  4795                           
  4796                           ; BSR set to: 15
  4797  001928  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  4798                           
  4799                           ; BSR set to: 15
  4800  00192C  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  4801                           
  4802                           ; BSR set to: 15
  4803  001930  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  4804                           
  4805                           ; BSR set to: 15
  4806  001934  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  4807  001938  0EFC               	movlw	252
  4808  00193A  010F               	movlb	15	; () banked
  4809  00193C  173F               	andwf	63,f,b	;volatile
  4810  00193E  0E03               	movlw	3
  4811  001940  010F               	movlb	15	; () banked
  4812  001942  133F               	iorwf	63,f,b	;volatile
  4813                           
  4814                           ; BSR set to: 15
  4815  001944  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  4816                           
  4817                           ; BSR set to: 15
  4818  001948  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  4819                           
  4820                           ; BSR set to: 15
  4821  00194C  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  4822                           
  4823                           ; BSR set to: 15
  4824  001950  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  4825                           
  4826                           ; BSR set to: 15
  4827  001954  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  4828                           
  4829                           ; BSR set to: 15
  4830  001958  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  4831  00195C  5005               	movf	RtccReadDate@rTD1+2,w,c
  4832  00195E  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  4833  001960  A4D8               	btfss	status,2,c
  4834  001962  D7D8               	goto	l2133
  4835                           
  4836                           ; BSR set to: 15
  4837                           
  4838                           ; BSR set to: 15
  4839  001964  EE20 F001          	lfsr	2,1
  4840  001968  5001               	movf	RtccReadDate@pDt,w,c
  4841  00196A  26D9               	addwf	fsr2l,f,c
  4842  00196C  5002               	movf	RtccReadDate@pDt+1,w,c
  4843  00196E  22DA               	addwfc	fsr2h,f,c
  4844  001970  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  4845  001974  EE20 F002          	lfsr	2,2
  4846  001978  5001               	movf	RtccReadDate@pDt,w,c
  4847  00197A  26D9               	addwf	fsr2l,f,c
  4848  00197C  5002               	movf	RtccReadDate@pDt+1,w,c
  4849  00197E  22DA               	addwfc	fsr2h,f,c
  4850  001980  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  4851                           
  4852                           ; BSR set to: 15
  4853  001984  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  4854  001988  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  4855  00198C  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  4856                           
  4857                           ; BSR set to: 15
  4858  001990  EE20 F003          	lfsr	2,3
  4859  001994  5001               	movf	RtccReadDate@pDt,w,c
  4860  001996  26D9               	addwf	fsr2l,f,c
  4861  001998  5002               	movf	RtccReadDate@pDt+1,w,c
  4862  00199A  22DA               	addwfc	fsr2h,f,c
  4863  00199C  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  4864                           
  4865                           ; BSR set to: 15
  4866  0019A0  0012               	return		;funcret
  4867  0019A2                     __end_of_RtccReadDate:
  4868                           	opt stack 0
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           prodh	equ	0xFF4
  4874                           prodl	equ	0xFF3
  4875                           intcon	equ	0xFF2
  4876                           indf0	equ	0xFEF
  4877                           postinc0	equ	0xFEE
  4878                           fsr0h	equ	0xFEA
  4879                           fsr0l	equ	0xFE9
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1l	equ	0xFE1
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           indf0	equ	0xFEF
  4897                           postinc0	equ	0xFEE
  4898                           fsr0h	equ	0xFEA
  4899                           fsr0l	equ	0xFE9
  4900                           wreg	equ	0xFE8
  4901                           postdec1	equ	0xFE5
  4902                           fsr1l	equ	0xFE1
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910                           	psect	rparam
  4911  0000                     tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           indf0	equ	0xFEF
  4919                           postinc0	equ	0xFEE
  4920                           fsr0h	equ	0xFEA
  4921                           fsr0l	equ	0xFE9
  4922                           wreg	equ	0xFE8
  4923                           postdec1	equ	0xFE5
  4924                           fsr1l	equ	0xFE1
  4925                           indf2	equ	0xFDF
  4926                           postinc2	equ	0xFDE
  4927                           postdec2	equ	0xFDD
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8


Data Sizes:
    Strings     44
    Constant    14
    Data        12
    BSS         70
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      90
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[7]), STR_4(CODE[7]), buffer2(BANK0[20]), STR_1(CODE[7]), 

    jumpIfNotNumber@x	PTR unsigned char  size(2) Largest target is 1
		 -> main@x(COMRAM[1]), 

    evalueChanceOfRaw@y	PTR unsigned char  size(2) Largest target is 1
		 -> main@y(COMRAM[1]), 

    evalueChanceOfRaw@x	PTR unsigned char  size(2) Largest target is 1
		 -> main@x(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _jumpIfNotNumber->_lcd_setcursor_vb
    _lcd_setcursor_vb->_lcd_send_byte
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   16633
                                             35 COMRAM     3     3      0
                           _Read_RTC
                              _Setup
                           _caratula
                  _evalueChanceOfRaw
                    _jumpIfNotNumber
                         _lcd_gotoxy
                   _lcd_setcursor_vb
                           _setClock
 ---------------------------------------------------------------------------------
 (1) _setClock                                             2     2      0    2299
                                             13 COMRAM     2     2      0
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (1) _jumpIfNotNumber                                      4     1      3    1144
                                              6 COMRAM     4     1      3
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (1) _lcd_setcursor_vb                                     2     1      1     796
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _evalueChanceOfRaw                                    5     1      4     194
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0    6005
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    22     10    1916
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2238
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1873
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    1205
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _evalueChanceOfRaw
   _jumpIfNotNumber
     _lcd_setcursor_vb
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_setcursor_vb
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _setClock
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     26      5A       1       94.7%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      86       6        0.0%
DATA                 0      0      86       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 23 19:16:18 2016

                         _a 002B                           _b 002D                           _c 002F  
                         _i 0031                           _j 0033                           _k 0035  
            ?_lcd_send_byte 0003                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
               lcd_comand@d 0005                __CFG_CP0$OFF 000000                         l207 1D78  
                       l208 1D7A                         l182 1856                         l184 1858  
                       l185 1864                         l286 110E                         l930 1BDA  
                       l940 1C7A                         u930 1AB0                         u950 1AC8  
                       u970 1AE2                         u948 1AB2                         u990 1AFE  
                       u968 1ACA                         u988 1AE4                         _dia 0050  
                       _mes 0056                         wreg 000FE8             RtccReadDate@pDt 0001  
               lcd_gotoxy@x 0006                 lcd_gotoxy@y 0005                        l2011 18F8  
                      l2015 1908                        l2007 18EC                        l2025 1B9E  
                      l2107 1B1A                        l1059 1E3E                        l2027 1BA8  
                      l2203 1010                        l2133 1914                        l2037 1BCE  
                      l2029 1BB0                        l2053 1C6E                        l2045 1C46  
                      l2047 1C50                        l2231 10AC                        l2223 1084  
                      l2215 1054                        l2207 1016                        l2049 1C58  
                      l2233 10B6                        l2209 1038                        l2251 1114  
                      l2243 10E4                        l2227 1088                        l2219 1060  
                      l2411 19E6                        l2403 19B8                        l2173 1C10  
                      l2245 10EC                        l2237 10C2                        l2261 1190  
                      l2421 1720                        l2271 1A4A                        l2191 0F8E  
                      l2183 0F60                        l2407 19CE                        l2415 19FE  
                      l2281 1A62                        l1801 1DEE                        l2169 1BE6  
                      l2257 1168                        l2185 0F6E                        l2177 0F46  
                      l2441 1780                        l2433 175C                        l2275 1A52  
                      l1803 1DF4                        l2195 0FAC                        l2259 1174  
                      l2363 1606                        l2435 1762                        l2427 173E  
                      l2451 17C0                        l1821 1496                        l2189 0F78  
                      l2461 17E2                        l1831 14C6                        l1815 146C  
                      l2359 15EE                        l1825 14AA                        l2289 1A76  
                      l2369 162A                        l2449 179E                        l1931 140A  
                      l1935 1416                        l1863 1522                        l1775 1E50  
                      l1951 1CAC                        l1945 1C88                        l2489 1868  
                      l1939 1422                        l1883 134A                        l1867 152E  
                      l1859 1516                        l1947 1C94                        l1955 1CB8  
                      l1893 1398                        l1949 1CA0                        l1965 1E1E  
                      l1983 1894                        l1889 1384                        l1899 13B4  
                      l1995 18BC                        l1997 18C6                        l1989 18A6  
                      l1999 18CE                        STR_1 0F34                        STR_2 0F0F  
                      STR_3 0F1E                        STR_4 0F34                        STR_5 0F2D  
                      u1008 1B00                        u1430 1C06                        u1440 1C30  
                      u1437 1BFC                        u1447 1C26                        u1650 1616  
                      u1760 1734                        u1770 1752                        u1780 1776  
                      u1790 1794                        u1857 1814                        u1867 186E  
                      u1877 17CA                        u1887 1E40                        u1897 1E52  
          ?_lcd_send_nibble 0001                        _anio 004E                        _flag 02D0  
                      _main 17D4                        _hora 0054                        fsr0h 000FEA  
                      indf0 000FEF                        fsr0l 000FE9                        fsr2h 000FDA  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
             __CFG_T1DIG$ON 000000                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000            RtccReadDate@rTD0 000B  
          RtccReadDate@rTD1 0003                ___param_bank 000010             RtccReadTime@pTm 0001  
           _jumpIfNotNumber 19A2                 _Delay1KTCYx 1E3C               __CFG_PLLDIV$1 000000  
                     ?_main 0001             __end_of___awdiv 1914       __size_of_Delay100TCYx 0012  
           ___awdiv@divisor 0003             __end_of___lwdiv 1BE4             __end_of___lwmod 1C84  
           ___awdiv@counter 0005                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94              __CFG_FCMEN$OFF 000000                       _Setup 1CD0  
           __end_of_dpowers 0F0B                       _mes_d 0048                       _mes_u 0049  
           __end_of_isdigit 1E28                       main@x 0026                       main@y 0025  
            __pbitbssCOMRAM 02D0                       tablat 000FF5                lcd_putrs@ptr 0009  
                     status 000FD8             __end_of_sprintf 11A0     __CFG_DSWDTOSC$INTOSCREF 000000  
           __initialization 1D18                _Delay100TCYx 1E4E                __end_of_main 187E  
           ??_lcd_send_byte 0004            RtccReadTime@rTD0 000B            RtccReadTime@rTD1 0003  
          __end_of_Read_RTC 171C                      ??_main 0024               __activetblptr 000002  
          __end_of_RtccWrOn 1E72                      ?_Setup 0001                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _EECON2 000FA7                      _ANCON0 000F48  
          ___awdiv@dividend 0001              __CFG_WDTEN$OFF 000000            RtccWriteDate@pDt 0001  
                    _RTCCFG 000F3F              __CFG_WPCFG$OFF 000000     __end_of_jumpIfNotNumber 1A24  
          __end_of_caratula 1644              __CFG_WPDIS$OFF 000000              __CFG_XINST$OFF 000000  
          __end_of_lcd_init 1AA4            __end_of_lcd_putc 1CD0           ?_lcd_setcursor_vb 0005  
                    ___wmul 1DBA                   ??___awdiv 0005              __CFG_STVREN$ON 000000  
                    _diasem 0052                      _anio_d 0041                      _anio_u 0042  
                 ??___lwdiv 0005                   ??___lwmod 000C          ??_lcd_setcursor_vb 0006  
                    _hora_d 0046                      _hora_u 0047                      clear_0 1D1E  
                    clear_1 1D2C            ___awdiv@quotient 0007                      _minuto 0058  
     __end_of_RtccWriteDate 142E            __end_of_setClock 17D4       __end_of_RtccWriteTime 153A  
          RtccWriteTime@pTm 0001                __pdataCOMRAM 004E                   ??_isdigit 0001  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0017                  __accesstop 0060  
   __end_of__initialization 1D52          __size_of_Write_RTC 0148               ___rparam_used 000001  
            __pcstackCOMRAM 0001               __end_of_Setup 1D18           _evalueChanceOfRaw 1D8E  
           __CFG_DSWDTPS$G2 000000          ?_evalueChanceOfRaw 0001             __CFG_OSC$INTOSC 000000  
                   ??_Setup 000E         ??_evalueChanceOfRaw 0005           lcd_gotoxy@address 0007  
        __size_of_lcd_putrs 0054                sprintf@width 0021                  __pbssBANK0 0060  
                 ?_Read_RTC 0001                  _dia_semana 0043   RtccWriteTime@tempHourWDay 000A  
                __pnvCOMRAM 0041            ?_jumpIfNotNumber 0007                   ?_RtccWrOn 0001  
            lcd_send_byte@n 0003   __end_of_evalueChanceOfRaw 1DBA                     ?___wmul 0001  
             ?_RtccReadDate 0001               ?_RtccReadTime 0001                ?_Delay1KTCYx 0001  
         __end_of_Write_RTC 12E8                  _lcd_comand 1E72                   ?_caratula 0001  
                _lcd_gotoxy 1DE2                     _RTCVALH 000F99                     _RTCVALL 000F98  
                 ?_lcd_init 0001                   ?_lcd_putc 0001                  ??_Read_RTC 0013  
                 ?_setClock 0001                     __Hparam 0000                     __Lparam 0000  
  __size_of_lcd_send_nibble 0076                  ??_RtccWrOn 0001              ??_RtccReadDate 0003  
            ??_RtccReadTime 0003                     ___awdiv 187E           __end_of_lcd_putrs 1C38  
           __size_of___wmul 0028                     ___lwdiv 1B88                     ___lwmod 1C38  
              __psmallconst 0F00                 _RtccTimeVal 0027                     __pcinit 1D18  
                   _fecha_d 0044                     _fecha_u 0045                     __ramtop 0F00  
                   __ptext0 17D4                     __ptext1 171C                     __ptext2 19A2  
                   __ptext3 1E28                     __ptext4 1D8E                     __ptext5 153A  
                   __ptext6 0F3C                     __ptext7 1E06                     __ptext8 1DBA  
                   __ptext9 1C38                     _buffer2 0078                   _T1CONbits 000FCD  
                   _dpowers 0F01                     _isdigit 1E06                  ??_caratula 0024  
                   _segundo 0037                     _sprintf 0F3C                  ??_lcd_init 0005  
                ??_lcd_putc 0008        end_of_initialization 1D52            jumpIfNotNumber@x 0007  
          jumpIfNotNumber@y 0009        lcd_send_byte@address 0004               __Lmediumconst 0000  
                ??_setClock 000E  __size_of_evalueChanceOfRaw 002C                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
     __end_of_lcd_send_byte 1D8E                   _PORTAbits 000F80            __CFG_DSBOREN$OFF 000000  
               ?_lcd_comand 0001            __CFG_CPUDIV$OSC1 000000                   _TRISBbits 000F93  
               ?_lcd_gotoxy 0005   __size_of_lcd_setcursor_vb 0014             _LCD_INIT_STRING 0F0B  
          __CFG_IOL1WAY$OFF 000000   RtccWriteDate@tempDayMonth 000A         __CFG_MSSP7B_EN$MSK7 000000  
          Delay100TCYx@unit 0001              __end_of___wmul 1DE2               __pidataCOMRAM 1E80  
 RtccWriteDate@tempHourWDay 000C           ??_lcd_send_nibble 0001        __size_of_Delay1KTCYx 0012  
          __CFG_DSWDTEN$OFF 000000         start_initialization 1D18        __end_of_RtccReadDate 19A2  
      __end_of_RtccReadTime 1B88        RtccWriteTime@wasAlrm 0006        RtccWriteTime@wasWrEn 0007  
    __size_of_RtccWriteDate 0146             RtccWriteDate@di 0003      __size_of_RtccWriteTime 010C  
         __size_of_Read_RTC 00D8         __size_of_lcd_comand 000E         __size_of_lcd_gotoxy 0024  
                  ??___wmul 0005           __size_of_RtccWrOn 0012             RtccWriteTime@di 0003  
          __CFG_LPT1OSC$OFF 000000                 _ALRMCFGbits 000F91     __end_of_LCD_INIT_STRING 0F0F  
               __pbssCOMRAM 0027                   _Write_RTC 11A0                _isdigit$1836 0002  
         __size_of_caratula 010A             Delay1KTCYx@unit 0001           __size_of_lcd_init 0080  
               sprintf@flag 001D           __size_of_lcd_putc 004C                 sprintf@prec 0020  
          ___lwdiv@dividend 0001               ?_Delay100TCYx 0001           __size_of_setClock 00B8  
                  ?___awdiv 0001                    ?___lwdiv 0001                    ?___lwmod 0008  
  __size_of_jumpIfNotNumber 0082     RtccWriteTime@tempMinSec 0008                   _lcd_putrs 1BE4  
   lcd_setcursor_vb@visible 0006               _RtccWriteDate 12E8                 __smallconst 0F00  
             _RtccWriteTime 142E                    ?_isdigit 0001        __CFG_RTCOSC$T1OSCREF 000000  
          _lcd_setcursor_vb 1E28              __size_of_Setup 0048                  ?_Write_RTC 0001  
          ___lwdiv@quotient 0005                    ?_sprintf 000D            _RtccAlrmTimeDate 0060  
            ___wmul@product 0005                    _LATBbits 000F8A                    _PIE3bits 000FA3  
                 _segundo_d 004C              ??_Delay100TCYx 0001                   _segundo_u 004D  
          __CFG_WDTPS$32768 000000          RtccWriteDate@wasOn 0005          _Rtcc_read_TimeDate 0070  
            ?_RtccWriteDate 0001                  ?_lcd_putrs 0009           ___wmul@multiplier 0001  
            ?_RtccWriteTime 0001          evalueChanceOfRaw@x 0001          evalueChanceOfRaw@y 0003  
                 lcd_init@i 0005       __size_of_RtccReadDate 008E                ??_lcd_comand 0005  
                 lcd_putc@c 0008       __size_of_RtccReadTime 006E                ??_lcd_gotoxy 0006  
                 copy_data0 1D46                    _Read_RTC 1644             _lcd_send_nibble 1AA4  
                  __Hrparam 0000                    _RtccDate 0039                    __Lrparam 0000  
                  _RtccTime 003D                    _RtccWrOn 1E60          __end_of_lcd_comand 1E80  
        __end_of_lcd_gotoxy 1E06                _RtccReadDate 1914            __size_of___awdiv 0096  
              _RtccReadTime 1B1A            __size_of___lwdiv 005C            __size_of___lwmod 004C  
              _RtccTimeDate 0068                  sprintf@val 001E           ??_jumpIfNotNumber 000A  
                 setClock@x 000F                    _caratula 153A            __size_of_isdigit 0022  
           ___lwdiv@divisor 0003                 ??_Write_RTC 000E             ___lwdiv@counter 0007  
                  __ptext10 1B88                    __ptext11 1BE4                    __ptext20 1E4E  
                  __ptext12 1C84                    __ptext21 11A0                    __ptext13 1DE2  
                  __ptext22 187E                    __ptext14 1CD0                    __ptext23 142E  
                  __ptext15 1A24                    __ptext24 12E8                    __ptext16 1E3C  
                  __ptext25 1E60                    __ptext17 1E72                    __ptext26 1644  
                  __ptext18 1D5C                    __ptext27 1B1A                    __ptext19 1AA4  
                  __ptext28 1914                    _lcd_init 1A24                    _lcd_putc 1C84  
          __size_of_sprintf 0264      __size_of_lcd_send_byte 0032               __size_of_main 00AA  
                  _setClock 171C                    _minuto_d 004A                    _minuto_u 004B  
             ??_Delay1KTCYx 0001             ??_RtccWriteDate 0004             ??_RtccWriteTime 0004  
               ??_lcd_putrs 000B                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
        RtccWriteTime@wasOn 0005        __end_of_Delay100TCYx 1E60                    isdigit@c 0003  
                 sprintf@ap 001B     __end_of_lcd_send_nibble 1B1A                   sprintf@sp 000D  
     lcd_setcursor_vb@blink 0005            ___lwmod@dividend 0008                  _OSCCONbits 000FD3  
  __end_of_lcd_setcursor_vb 1E3C       RtccWriteDate@tempYear 0007               _lcd_send_byte 1D5C  
                _RTCCFGbits 000F3F                    sprintf@c 0023                    sprintf@f 000F  
           ___lwmod@divisor 000A         __end_of_Delay1KTCYx 1E4E             ___lwmod@counter 000C  
      RtccWriteDate@wasAlrm 0006        RtccWriteDate@wasWrEn 0009       lcd_send_nibble@nibble 0002  
